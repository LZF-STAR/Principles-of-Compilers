
;; Function std::ctype<char>::do_widen (_ZNKSt5ctypeIcE8do_widenEc, funcdef_no=1561, decl_uid=37570, cgraph_uid=532, symbol_order=561)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
this = &NONLOCAL
__c = &NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"this"[label="this = { 5 }"];
"__c"[label="__c = { 5 }"];
"_ZNKSt5ctypeIcE8do_widenEc";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*this";
"*__c";
"*_ZNKSt5ctypeIcE8do_widenEc";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this";
"_ZNKSt5ctypeIcE8do_widenEc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"this";
"_ZNKSt5ctypeIcE8do_widenEc";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
this = { NONLOCAL }
__c = { NONLOCAL } same as this
_ZNKSt5ctypeIcE8do_widenEc = { }


Alias information for virtual std::ctype<char>::char_type std::ctype<char>::do_widen(char) const

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


char_type std::ctype<char>::do_widen (const struct ctype * const this, char __c)
{
  <bb 2> [local count: 1073741824]:
  return __c_1(D);

}



;; Function std::endl.isra (_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0, funcdef_no=2298, decl_uid=49501, cgraph_uid=1045, symbol_order=1223)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__os = &NONLOCAL
_2 = *__os
_3 = *_2 + -192
_4 = _3
_5 = __os + UNKNOWN
_13 = *_5 + 1920
_16 = *_13 + 448
_18 = *_13 + 536
ESCAPED = _13
_21 = *_13
_22 = *_21 + 384
PROF_25 = &ANYTHING
ESCAPED = _13
ESCAPED = &NONLOCAL
_27 = NONLOCAL
_23 = _27
_23 = &NONLOCAL
_20 = _18
_20 = _23
ESCAPED = __os
ESCAPED = _20
_7 = NONLOCAL
ESCAPED = _7
_8 = NONLOCAL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__os"[label="__os = { 5 }"];
"_2";
"_3";
"_4";
"_5";
"_13";
"_ZSt16__throw_bad_castv";
"_16";
"_18";
"_ZNKSt5ctypeIcE13_M_widen_initEv";
"_21";
"_22";
"PROF_25"[label="PROF_25 = { 2 }"];
"_27";
"_23"[label="_23 = { 5 }"];
"_20";
"_ZNSo3putEc";
"_7";
"_ZNSo5flushEv";
"_8";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*__os";
"*_2";
"*_3";
"*_4";
"*_5";
"*_13";
"*_ZSt16__throw_bad_castv";
"*_16";
"*_18";
"*_ZNKSt5ctypeIcE13_M_widen_initEv";
"*_21";
"*_22";
"*PROF_25";
"*_ZNSo3putEc";
"*_ZNSo5flushEv";
"*_8";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"__os" -> "ESCAPED";
"_13" -> "ESCAPED";
"_20" -> "ESCAPED";
"_7" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"*__os" -> "_2";
"_3" -> "_4";
"*_13" -> "_21";
"NONLOCAL" -> "_27";
"_27" -> "_23";
"_18" -> "_20";
"_23" -> "_20";
"NONLOCAL" -> "_7";
"NONLOCAL" -> "_8";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__os" [label="\N\n_2 = *__os\l_5 = __os + UNKNOWN\l"];
"_2" [label="\N\n_3 = *_2 + -192\l"];
"_3";
"_5" [label="\N\n_13 = *_5 + 1920\l"];
"_13" [label="\N\n_16 = *_13 + 448\l_18 = *_13 + 536\l_21 = *_13\l"];
"_ZSt16__throw_bad_castv";
"_16";
"_18";
"_ZNKSt5ctypeIcE13_M_widen_initEv";
"_21" [label="\N\n_22 = *_21 + 384\l"];
"_22";
"PROF_25";
"_27";
"_20";
"_ZNSo3putEc";
"_ZNSo5flushEv";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_22";
"__os" -> "ESCAPED";
"_13" -> "ESCAPED";
"_18" -> "_20";
"_27" -> "ESCAPED";
"_27" -> "_20";
"_20" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _27\l"];
"STOREDANYTHING";
"INTEGER";
"__os" [label="\N\n_2 = *__os\l_5 = __os + UNKNOWN\l"];
"_2" [label="\N\n_3 = *_2 + -192\l"];
"_3";
"_5" [label="\N\n_13 = *_5 + 1920\l"];
"_13" [label="\N\n_16 = *_13 + 448\l_18 = *_13 + 536\l_21 = *_13\l"];
"_ZSt16__throw_bad_castv";
"_16";
"_18";
"_ZNKSt5ctypeIcE13_M_widen_initEv";
"_21" [label="\N\n_22 = *_21 + 384\l"];
"_22";
"PROF_25";
"_27";
"_20";
"_ZNSo3putEc";
"_ZNSo5flushEv";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_3";
"STOREDANYTHING" -> "_5";
"STOREDANYTHING" -> "_13";
"STOREDANYTHING" -> "_16";
"STOREDANYTHING" -> "_18";
"STOREDANYTHING" -> "_22";
"__os" -> "ESCAPED";
"_13" -> "ESCAPED";
"_18" -> "_20";
"_27" -> "ESCAPED";
"_27" -> "_2";
"_27" -> "_3";
"_27" -> "_13";
"_27" -> "_16";
"_27" -> "_18";
"_27" -> "_21";
"_27" -> "_22";
"_27" -> "_20";
"_20" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as _27
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__os = { NONLOCAL }
_2 = { ESCAPED NONLOCAL }
_3 = { ESCAPED NONLOCAL }
_4 = { ESCAPED NONLOCAL } same as _3
_5 = { NONLOCAL }
_13 = { ESCAPED NONLOCAL }
_ZSt16__throw_bad_castv = { }
_16 = { ESCAPED NONLOCAL }
_18 = { ESCAPED NONLOCAL }
_ZNKSt5ctypeIcE13_M_widen_initEv = { }
_21 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL }
PROF_25 = { ANYTHING }
_27 = { ESCAPED NONLOCAL }
_23 = { ESCAPED NONLOCAL } same as _27
_20 = { ESCAPED NONLOCAL }
_ZNSo3putEc = { }
_7 = { ESCAPED NONLOCAL } same as _27
_ZNSo5flushEv = { }
_8 = { ESCAPED NONLOCAL } same as _27


Alias information for std::basic_ostream<_CharT, _Traits>& std::endl(std::basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = std::char_traits<char>]

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information

__os_1(D), points-to non-local, points-to NULL, points-to vars: { }
_2, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_5, points-to non-local, points-to NULL, points-to vars: { }
_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_8, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_13, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_21, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_22, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
PROF_25, points-to anything, points-to NULL

void std::endl.isra (struct basic_ostream & __os)
{
  char_type D.49538;
  char_type D.49535;
  char_type D.49532;
  char_type D.49529;
  int (*) () * _2;
  long int _3;
  sizetype _4;
  struct basic_ios * _5;
  struct basic_ostream & _7;
  struct basic_ostream & _8;
  const struct __ctype_type * _13;
  char _16;
  char _18;
  char _20;
  int (*) () * _21;
  int (*) () _22;
  char _23;
  void * PROF_25;
  char _27;

  <bb 2> [local count: 1073741824]:
  _2 = __os_1(D)->_vptr.basic_ostream;
  _3 = MEM[(long int *)_2 + -24B];
  _4 = (sizetype) _3;
  _5 = __os_1(D) + _4;
  _13 = MEM[(const struct __ctype_type * *)_5 + 240B];
  if (_13 == 0B)
    goto <bb 3>; [0.04%]
  else
    goto <bb 4>; [99.96%]

  <bb 3> [local count: 429496]:
  std::__throw_bad_cast ();

  <bb 4> [local count: 1073312329]:
  _16 = MEM[(const struct ctype *)_13]._M_widen_ok;
  if (_16 != 0)
    goto <bb 5>; [51.12%]
  else
    goto <bb 6>; [48.88%]

  <bb 5> [local count: 548677267]:
  _18 = MEM[(const struct ctype *)_13]._M_widen[10];
  goto <bb 9>; [100.00%]

  <bb 6> [local count: 524635063]:
  std::ctype<char>::_M_widen_init (_13);
  _21 = MEM[(const struct ctype *)_13].D.37636._vptr.facet;
  _22 = MEM[(int (*) () *)_21 + 48B];
  PROF_25 = [obj_type_ref] OBJ_TYPE_REF(_22;(const struct ctype)_13->6);
  if (PROF_25 == do_widen)
    goto <bb 8>; [80.00%]
  else
    goto <bb 7>; [20.00%]

  <bb 7> [local count: 104927014]:
  _27 = OBJ_TYPE_REF(_22;(const struct ctype)_13->6) (_13, 10);

  <bb 8> [local count: 524635063]:
  # _23 = PHI <_27(7), 10(6)>

  <bb 9> [local count: 1073312330]:
  # _20 = PHI <_18(5), _23(8)>
  _7 = std::basic_ostream<char>::put (__os_1(D), _20);
  _8 = std::basic_ostream<char>::flush (_7);
  return;

}



;; Function main (main, funcdef_no=1808, decl_uid=44612, cgraph_uid=542, symbol_order=572) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZSt3cin.0+64 = NONLOCAL
_ZSt3cin.64+64 = NONLOCAL
_ZSt3cin.128+64 = NONLOCAL
_ZSt3cin.192+224 = NONLOCAL
_ZSt3cin.448+64 = NONLOCAL
_ZSt3cin.512+64 = NONLOCAL
_ZSt3cin.576+1120 = NONLOCAL
_ZSt3cin.1728+64 = NONLOCAL
_ZSt3cin.1792+64 = NONLOCAL
_ZSt3cin.1856+64 = NONLOCAL
_ZSt3cin.1920+16 = NONLOCAL
_ZSt3cin.1984+64 = NONLOCAL
_ZSt3cin.2048+64 = NONLOCAL
_ZSt3cin.2112+64 = NONLOCAL
_ZSt3cin.2176+64 = NONLOCAL
ESCAPED = &_ZSt3cin.0+64
ESCAPED = &n
_ZSt4cout.0+64 = NONLOCAL
_ZSt4cout.64+64 = NONLOCAL
_ZSt4cout.128+224 = NONLOCAL
_ZSt4cout.384+64 = NONLOCAL
_ZSt4cout.448+64 = NONLOCAL
_ZSt4cout.512+1120 = NONLOCAL
_ZSt4cout.1664+64 = NONLOCAL
_ZSt4cout.1728+64 = NONLOCAL
_ZSt4cout.1792+64 = NONLOCAL
_ZSt4cout.1856+16 = NONLOCAL
_ZSt4cout.1920+64 = NONLOCAL
_ZSt4cout.1984+64 = NONLOCAL
_ZSt4cout.2048+64 = NONLOCAL
_ZSt4cout.2112+64 = NONLOCAL
ESCAPED = &_ZSt4cout.0+64
ESCAPED = &NULL
_9 = NONLOCAL
ESCAPED = _9
ESCAPED = &_ZSt4cout.0+64
ESCAPED = &NONLOCAL
_11 = NONLOCAL
ESCAPED = _11
b_13 = a_2 + UNKNOWN
b_13 = b_3 + UNKNOWN
ESCAPED = &_ZSt4cout.0+64
ESCAPED = b_13
_15 = NONLOCAL
_20 = *_15
_21 = *_20 + -192
_22 = _21
_23 = _15 + UNKNOWN
_27 = *_23 + 1920
_30 = *_27 + 448
_32 = *_27 + 536
ESCAPED = _27
_35 = *_27
_36 = *_35 + 384
PROF_39 = &ANYTHING
ESCAPED = _27
ESCAPED = &NONLOCAL
_41 = NONLOCAL
_37 = _41
_37 = &NONLOCAL
_34 = _32
_34 = _37
ESCAPED = _15
ESCAPED = _34
_25 = NONLOCAL
ESCAPED = _25
_26 = NONLOCAL
i_16 = i_4 + UNKNOWN
i_16 = &NONLOCAL
a_2 = &NULL
a_2 = b_3
b_3 = &NONLOCAL
b_3 = b_13
i_4 = &NONLOCAL
i_4 = i_16
n.0_1 = n

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 5 8 23 24 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_ZSt3cin.0+64";
"_ZSt3cin.64+64";
"_ZSt3cin.128+64";
"_ZSt3cin.192+224";
"_ZSt3cin.448+64";
"_ZSt3cin.512+64";
"_ZSt3cin.576+1120";
"_ZSt3cin.1728+64";
"_ZSt3cin.1792+64";
"_ZSt3cin.1856+64";
"_ZSt3cin.1920+16";
"_ZSt3cin.1984+64";
"_ZSt3cin.2048+64";
"_ZSt3cin.2112+64";
"_ZSt3cin.2176+64";
"n";
"_ZSt4cout.0+64";
"_ZSt4cout.64+64";
"_ZSt4cout.128+224";
"_ZSt4cout.384+64";
"_ZSt4cout.448+64";
"_ZSt4cout.512+1120";
"_ZSt4cout.1664+64";
"_ZSt4cout.1728+64";
"_ZSt4cout.1792+64";
"_ZSt4cout.1856+16";
"_ZSt4cout.1920+64";
"_ZSt4cout.1984+64";
"_ZSt4cout.2048+64";
"_ZSt4cout.2112+64";
"_ZNSirsERi";
"_ZNSolsEi";
"_9";
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0";
"_11";
"b_13";
"a_2"[label="a_2 = { 1 }"];
"b_3"[label="b_3 = { 5 }"];
"_15";
"_20";
"_21";
"_22";
"_23";
"_27";
"_ZSt16__throw_bad_castv";
"_30";
"_32";
"_ZNKSt5ctypeIcE13_M_widen_initEv";
"_35";
"_36";
"PROF_39"[label="PROF_39 = { 2 }"];
"_41";
"_37"[label="_37 = { 5 }"];
"_34";
"_ZNSo3putEc";
"_25";
"_ZNSo5flushEv";
"_26";
"i_16"[label="i_16 = { 5 }"];
"i_4"[label="i_4 = { 5 }"];
"n.0_1";
"main";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*_ZSt3cin.0+64";
"*_ZSt3cin.64+64";
"*_ZSt3cin.128+64";
"*_ZSt3cin.192+224";
"*_ZSt3cin.448+64";
"*_ZSt3cin.512+64";
"*_ZSt3cin.576+1120";
"*_ZSt3cin.1728+64";
"*_ZSt3cin.1792+64";
"*_ZSt3cin.1856+64";
"*_ZSt3cin.1920+16";
"*_ZSt3cin.1984+64";
"*_ZSt3cin.2048+64";
"*_ZSt3cin.2112+64";
"*_ZSt3cin.2176+64";
"*n";
"*_ZSt4cout.0+64";
"*_ZSt4cout.64+64";
"*_ZSt4cout.128+224";
"*_ZSt4cout.384+64";
"*_ZSt4cout.448+64";
"*_ZSt4cout.512+1120";
"*_ZSt4cout.1664+64";
"*_ZSt4cout.1728+64";
"*_ZSt4cout.1792+64";
"*_ZSt4cout.1856+16";
"*_ZSt4cout.1920+64";
"*_ZSt4cout.1984+64";
"*_ZSt4cout.2048+64";
"*_ZSt4cout.2112+64";
"*_ZNSirsERi";
"*_ZNSolsEi";
"*_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0";
"*b_13";
"*a_2";
"*b_3";
"*_20";
"*_21";
"*_22";
"*_23";
"*_27";
"*_ZSt16__throw_bad_castv";
"*_30";
"*_32";
"*_ZNKSt5ctypeIcE13_M_widen_initEv";
"*_35";
"*_36";
"*PROF_39";
"*_ZNSo3putEc";
"*_ZNSo5flushEv";
"*_26";
"*i_16";
"*i_4";
"*n.0_1";
"*main";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_9" -> "ESCAPED";
"_11" -> "ESCAPED";
"b_13" -> "ESCAPED";
"_15" -> "ESCAPED";
"_27" -> "ESCAPED";
"_34" -> "ESCAPED";
"_25" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_ZSt3cin.0+64";
"NONLOCAL" -> "_ZSt3cin.64+64";
"NONLOCAL" -> "_ZSt3cin.128+64";
"NONLOCAL" -> "_ZSt3cin.192+224";
"NONLOCAL" -> "_ZSt3cin.448+64";
"NONLOCAL" -> "_ZSt3cin.512+64";
"NONLOCAL" -> "_ZSt3cin.576+1120";
"NONLOCAL" -> "_ZSt3cin.1728+64";
"NONLOCAL" -> "_ZSt3cin.1792+64";
"NONLOCAL" -> "_ZSt3cin.1856+64";
"NONLOCAL" -> "_ZSt3cin.1920+16";
"NONLOCAL" -> "_ZSt3cin.1984+64";
"NONLOCAL" -> "_ZSt3cin.2048+64";
"NONLOCAL" -> "_ZSt3cin.2112+64";
"NONLOCAL" -> "_ZSt3cin.2176+64";
"NONLOCAL" -> "_ZSt4cout.0+64";
"NONLOCAL" -> "_ZSt4cout.64+64";
"NONLOCAL" -> "_ZSt4cout.128+224";
"NONLOCAL" -> "_ZSt4cout.384+64";
"NONLOCAL" -> "_ZSt4cout.448+64";
"NONLOCAL" -> "_ZSt4cout.512+1120";
"NONLOCAL" -> "_ZSt4cout.1664+64";
"NONLOCAL" -> "_ZSt4cout.1728+64";
"NONLOCAL" -> "_ZSt4cout.1792+64";
"NONLOCAL" -> "_ZSt4cout.1856+16";
"NONLOCAL" -> "_ZSt4cout.1920+64";
"NONLOCAL" -> "_ZSt4cout.1984+64";
"NONLOCAL" -> "_ZSt4cout.2048+64";
"NONLOCAL" -> "_ZSt4cout.2112+64";
"NONLOCAL" -> "_9";
"NONLOCAL" -> "_11";
"b_3" -> "a_2";
"b_13" -> "b_3";
"NONLOCAL" -> "_15";
"ESCAPED" -> "_20";
"_21" -> "_22";
"*_27" -> "_35";
"NONLOCAL" -> "_41";
"_41" -> "_37";
"_32" -> "_34";
"_37" -> "_34";
"NONLOCAL" -> "_25";
"NONLOCAL" -> "_26";
"i_16" -> "i_4";
"n" -> "n.0_1";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"STOREDANYTHING";
"INTEGER";
"_ZSt3cin.0+64";
"_ZSt3cin.64+64";
"_ZSt3cin.128+64";
"_ZSt3cin.192+224";
"_ZSt3cin.448+64";
"_ZSt3cin.512+64";
"_ZSt3cin.576+1120";
"_ZSt3cin.1728+64";
"_ZSt3cin.1792+64";
"_ZSt3cin.1856+64";
"_ZSt3cin.1920+16";
"_ZSt3cin.1984+64";
"_ZSt3cin.2048+64";
"_ZSt3cin.2112+64";
"_ZSt3cin.2176+64";
"_ZSt4cout.0+64";
"_ZSt4cout.64+64";
"_ZSt4cout.128+224";
"_ZSt4cout.384+64";
"_ZSt4cout.448+64";
"_ZSt4cout.512+1120";
"_ZSt4cout.1664+64";
"_ZSt4cout.1728+64";
"_ZSt4cout.1792+64";
"_ZSt4cout.1856+16";
"_ZSt4cout.1920+64";
"_ZSt4cout.1984+64";
"_ZSt4cout.2048+64";
"_ZSt4cout.2112+64";
"_ZNSirsERi";
"_ZNSolsEi";
"_9" [label="\N\n_20 = *_9\l_23 = _9 + UNKNOWN\l"];
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0";
"b_13";
"a_2" [label="\N\nb_13 = a_2 + UNKNOWN\l"];
"b_3" [label="\N\nb_13 = b_3 + UNKNOWN\l"];
"_20" [label="\N\nESCAPED = _20 + UNKNOWN\lESCAPED = *_20\l_21 = *_20 + -192\l*_20 = NONLOCAL\l"];
"_21";
"_23" [label="\N\n_27 = *_23 + 1920\l"];
"_27" [label="\N\n_30 = *_27 + 448\l_32 = *_27 + 536\l_35 = *_27\l"];
"_ZSt16__throw_bad_castv";
"_30";
"_32";
"_ZNKSt5ctypeIcE13_M_widen_initEv";
"_35" [label="\N\n_36 = *_35 + 384\l"];
"_36";
"PROF_39";
"_34";
"_ZNSo3putEc";
"_ZNSo5flushEv";
"i_16" [label="\N\ni_16 = i_16 + UNKNOWN\l"];
"n.0_1";
"main";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_ZSt3cin.0+64";
"STOREDANYTHING" -> "_ZSt3cin.64+64";
"STOREDANYTHING" -> "_ZSt3cin.128+64";
"STOREDANYTHING" -> "_ZSt3cin.192+224";
"STOREDANYTHING" -> "_ZSt3cin.448+64";
"STOREDANYTHING" -> "_ZSt3cin.512+64";
"STOREDANYTHING" -> "_ZSt3cin.576+1120";
"STOREDANYTHING" -> "_ZSt3cin.1728+64";
"STOREDANYTHING" -> "_ZSt3cin.1792+64";
"STOREDANYTHING" -> "_ZSt3cin.1856+64";
"STOREDANYTHING" -> "_ZSt3cin.1920+16";
"STOREDANYTHING" -> "_ZSt3cin.1984+64";
"STOREDANYTHING" -> "_ZSt3cin.2048+64";
"STOREDANYTHING" -> "_ZSt3cin.2112+64";
"STOREDANYTHING" -> "_ZSt3cin.2176+64";
"STOREDANYTHING" -> "n.0_1";
"STOREDANYTHING" -> "_ZSt4cout.0+64";
"STOREDANYTHING" -> "_ZSt4cout.64+64";
"STOREDANYTHING" -> "_ZSt4cout.128+224";
"STOREDANYTHING" -> "_ZSt4cout.384+64";
"STOREDANYTHING" -> "_ZSt4cout.448+64";
"STOREDANYTHING" -> "_ZSt4cout.512+1120";
"STOREDANYTHING" -> "_ZSt4cout.1664+64";
"STOREDANYTHING" -> "_ZSt4cout.1728+64";
"STOREDANYTHING" -> "_ZSt4cout.1792+64";
"STOREDANYTHING" -> "_ZSt4cout.1856+16";
"STOREDANYTHING" -> "_ZSt4cout.1920+64";
"STOREDANYTHING" -> "_ZSt4cout.1984+64";
"STOREDANYTHING" -> "_ZSt4cout.2048+64";
"STOREDANYTHING" -> "_ZSt4cout.2112+64";
"STOREDANYTHING" -> "b_13";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_32";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "i_16";
"_9" -> "_20";
"_9" -> "_ZSt3cin.0+64";
"_9" -> "_ZSt3cin.64+64";
"_9" -> "_ZSt3cin.128+64";
"_9" -> "_ZSt3cin.192+224";
"_9" -> "_ZSt3cin.448+64";
"_9" -> "_ZSt3cin.512+64";
"_9" -> "_ZSt3cin.576+1120";
"_9" -> "_ZSt3cin.1728+64";
"_9" -> "_ZSt3cin.1792+64";
"_9" -> "_ZSt3cin.1856+64";
"_9" -> "_ZSt3cin.1920+16";
"_9" -> "_ZSt3cin.1984+64";
"_9" -> "_ZSt3cin.2048+64";
"_9" -> "_ZSt3cin.2112+64";
"_9" -> "_ZSt3cin.2176+64";
"_9" -> "_ZSt4cout.0+64";
"_9" -> "_ZSt4cout.64+64";
"_9" -> "_ZSt4cout.128+224";
"_9" -> "_ZSt4cout.384+64";
"_9" -> "_ZSt4cout.448+64";
"_9" -> "_ZSt4cout.512+1120";
"_9" -> "_ZSt4cout.1664+64";
"_9" -> "_ZSt4cout.1728+64";
"_9" -> "_ZSt4cout.1792+64";
"_9" -> "_ZSt4cout.1856+16";
"_9" -> "_ZSt4cout.1920+64";
"_9" -> "_ZSt4cout.1984+64";
"_9" -> "_ZSt4cout.2048+64";
"_9" -> "_ZSt4cout.2112+64";
"_9" -> "_34";
"b_13" -> "_20";
"b_13" -> "b_3";
"b_3" -> "a_2";
"_27" -> "_20";
"_32" -> "_34";
"_34" -> "_20";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"STOREDANYTHING";
"INTEGER";
"_ZSt3cin.0+64";
"_ZSt3cin.64+64";
"_ZSt3cin.128+64";
"_ZSt3cin.192+224";
"_ZSt3cin.448+64";
"_ZSt3cin.512+64";
"_ZSt3cin.576+1120";
"_ZSt3cin.1728+64";
"_ZSt3cin.1792+64";
"_ZSt3cin.1856+64";
"_ZSt3cin.1920+16";
"_ZSt3cin.1984+64";
"_ZSt3cin.2048+64";
"_ZSt3cin.2112+64";
"_ZSt3cin.2176+64";
"_ZSt4cout.0+64";
"_ZSt4cout.64+64";
"_ZSt4cout.128+224";
"_ZSt4cout.384+64";
"_ZSt4cout.448+64";
"_ZSt4cout.512+1120";
"_ZSt4cout.1664+64";
"_ZSt4cout.1728+64";
"_ZSt4cout.1792+64";
"_ZSt4cout.1856+16";
"_ZSt4cout.1920+64";
"_ZSt4cout.1984+64";
"_ZSt4cout.2048+64";
"_ZSt4cout.2112+64";
"_ZNSirsERi";
"_ZNSolsEi";
"_9" [label="\N\n_20 = *_9\l_23 = _9 + UNKNOWN\l"];
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0";
"b_13";
"a_2" [label="\N\nb_13 = a_2 + UNKNOWN\l"];
"b_3" [label="\N\nb_13 = b_3 + UNKNOWN\l"];
"_20" [label="\N\n_20 = _20 + UNKNOWN\l_20 = *_20\l_21 = *_20 + -192\l*_20 = _9\l"];
"_21";
"_23" [label="\N\n_27 = *_23 + 1920\l"];
"_27" [label="\N\n_30 = *_27 + 448\l_32 = *_27 + 536\l_35 = *_27\l"];
"_ZSt16__throw_bad_castv";
"_30";
"_32";
"_ZNKSt5ctypeIcE13_M_widen_initEv";
"_35" [label="\N\n_36 = *_35 + 384\l"];
"_36";
"PROF_39";
"_34";
"_ZNSo3putEc";
"_ZNSo5flushEv";
"i_16" [label="\N\ni_16 = i_16 + UNKNOWN\l"];
"n.0_1";
"main";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "_20";
"STOREDANYTHING" -> "_ZSt3cin.0+64";
"STOREDANYTHING" -> "_ZSt3cin.64+64";
"STOREDANYTHING" -> "_ZSt3cin.128+64";
"STOREDANYTHING" -> "_ZSt3cin.192+224";
"STOREDANYTHING" -> "_ZSt3cin.448+64";
"STOREDANYTHING" -> "_ZSt3cin.512+64";
"STOREDANYTHING" -> "_ZSt3cin.576+1120";
"STOREDANYTHING" -> "_ZSt3cin.1728+64";
"STOREDANYTHING" -> "_ZSt3cin.1792+64";
"STOREDANYTHING" -> "_ZSt3cin.1856+64";
"STOREDANYTHING" -> "_ZSt3cin.1920+16";
"STOREDANYTHING" -> "_ZSt3cin.1984+64";
"STOREDANYTHING" -> "_ZSt3cin.2048+64";
"STOREDANYTHING" -> "_ZSt3cin.2112+64";
"STOREDANYTHING" -> "_ZSt3cin.2176+64";
"STOREDANYTHING" -> "n.0_1";
"STOREDANYTHING" -> "_ZSt4cout.0+64";
"STOREDANYTHING" -> "_ZSt4cout.64+64";
"STOREDANYTHING" -> "_ZSt4cout.128+224";
"STOREDANYTHING" -> "_ZSt4cout.384+64";
"STOREDANYTHING" -> "_ZSt4cout.448+64";
"STOREDANYTHING" -> "_ZSt4cout.512+1120";
"STOREDANYTHING" -> "_ZSt4cout.1664+64";
"STOREDANYTHING" -> "_ZSt4cout.1728+64";
"STOREDANYTHING" -> "_ZSt4cout.1792+64";
"STOREDANYTHING" -> "_ZSt4cout.1856+16";
"STOREDANYTHING" -> "_ZSt4cout.1920+64";
"STOREDANYTHING" -> "_ZSt4cout.1984+64";
"STOREDANYTHING" -> "_ZSt4cout.2048+64";
"STOREDANYTHING" -> "_ZSt4cout.2112+64";
"STOREDANYTHING" -> "b_13";
"STOREDANYTHING" -> "_21";
"STOREDANYTHING" -> "_23";
"STOREDANYTHING" -> "_27";
"STOREDANYTHING" -> "_30";
"STOREDANYTHING" -> "_32";
"STOREDANYTHING" -> "_36";
"STOREDANYTHING" -> "i_16";
"_ZSt3cin.0+64" -> "_20";
"_ZSt3cin.0+64" -> "_21";
"_ZSt3cin.64+64" -> "_20";
"_ZSt3cin.64+64" -> "_21";
"_ZSt3cin.128+64" -> "_20";
"_ZSt3cin.128+64" -> "_21";
"_ZSt3cin.192+224" -> "_20";
"_ZSt3cin.192+224" -> "_21";
"_ZSt3cin.448+64" -> "_20";
"_ZSt3cin.448+64" -> "_21";
"_ZSt3cin.512+64" -> "_20";
"_ZSt3cin.512+64" -> "_21";
"_ZSt3cin.576+1120" -> "_20";
"_ZSt3cin.576+1120" -> "_21";
"_ZSt3cin.1728+64" -> "_20";
"_ZSt3cin.1728+64" -> "_21";
"_ZSt3cin.1792+64" -> "_20";
"_ZSt3cin.1792+64" -> "_21";
"_ZSt3cin.1856+64" -> "_20";
"_ZSt3cin.1856+64" -> "_21";
"_ZSt3cin.1920+16" -> "_20";
"_ZSt3cin.1920+16" -> "_21";
"_ZSt3cin.1984+64" -> "_20";
"_ZSt3cin.1984+64" -> "_21";
"_ZSt3cin.2048+64" -> "_20";
"_ZSt3cin.2048+64" -> "_21";
"_ZSt3cin.2112+64" -> "_20";
"_ZSt3cin.2112+64" -> "_21";
"_ZSt3cin.2176+64" -> "_20";
"_ZSt3cin.2176+64" -> "_21";
"_ZSt4cout.0+64" -> "_20";
"_ZSt4cout.0+64" -> "_21";
"_ZSt4cout.64+64" -> "_20";
"_ZSt4cout.64+64" -> "_21";
"_ZSt4cout.128+224" -> "_20";
"_ZSt4cout.128+224" -> "_21";
"_ZSt4cout.384+64" -> "_20";
"_ZSt4cout.384+64" -> "_21";
"_ZSt4cout.448+64" -> "_20";
"_ZSt4cout.448+64" -> "_21";
"_ZSt4cout.512+1120" -> "_20";
"_ZSt4cout.512+1120" -> "_21";
"_ZSt4cout.1664+64" -> "_20";
"_ZSt4cout.1664+64" -> "_21";
"_ZSt4cout.1728+64" -> "_20";
"_ZSt4cout.1728+64" -> "_21";
"_ZSt4cout.1792+64" -> "_20";
"_ZSt4cout.1792+64" -> "_21";
"_ZSt4cout.1856+16" -> "_20";
"_ZSt4cout.1856+16" -> "_21";
"_ZSt4cout.1920+64" -> "_20";
"_ZSt4cout.1920+64" -> "_21";
"_ZSt4cout.1984+64" -> "_20";
"_ZSt4cout.1984+64" -> "_21";
"_ZSt4cout.2048+64" -> "_20";
"_ZSt4cout.2048+64" -> "_21";
"_ZSt4cout.2112+64" -> "_20";
"_ZSt4cout.2112+64" -> "_21";
"_9" -> "_ZSt3cin.0+64";
"_9" -> "_ZSt3cin.64+64";
"_9" -> "_ZSt3cin.128+64";
"_9" -> "_ZSt3cin.192+224";
"_9" -> "_ZSt3cin.448+64";
"_9" -> "_ZSt3cin.512+64";
"_9" -> "_ZSt3cin.576+1120";
"_9" -> "_ZSt3cin.1728+64";
"_9" -> "_ZSt3cin.1792+64";
"_9" -> "_ZSt3cin.1856+64";
"_9" -> "_ZSt3cin.1920+16";
"_9" -> "_ZSt3cin.1984+64";
"_9" -> "_ZSt3cin.2048+64";
"_9" -> "_ZSt3cin.2112+64";
"_9" -> "_ZSt3cin.2176+64";
"_9" -> "_ZSt4cout.0+64";
"_9" -> "_ZSt4cout.64+64";
"_9" -> "_ZSt4cout.128+224";
"_9" -> "_ZSt4cout.384+64";
"_9" -> "_ZSt4cout.448+64";
"_9" -> "_ZSt4cout.512+1120";
"_9" -> "_ZSt4cout.1664+64";
"_9" -> "_ZSt4cout.1728+64";
"_9" -> "_ZSt4cout.1792+64";
"_9" -> "_ZSt4cout.1856+16";
"_9" -> "_ZSt4cout.1920+64";
"_9" -> "_ZSt4cout.1984+64";
"_9" -> "_ZSt4cout.2048+64";
"_9" -> "_ZSt4cout.2112+64";
"_9" -> "_20";
"_9" -> "_21";
"_9" -> "_27";
"_9" -> "_30";
"_9" -> "_32";
"_9" -> "_35";
"_9" -> "_36";
"_9" -> "_34";
"_9" -> "n.0_1";
"b_13" -> "b_3";
"b_13" -> "_20";
"b_3" -> "a_2";
"_27" -> "_20";
"_32" -> "_34";
"_34" -> "_20";
"n.0_1" -> "_20";
"n.0_1" -> "_21";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZSt3cin.0+64 _ZSt3cin.64+64 _ZSt3cin.128+64 _ZSt3cin.192+224 _ZSt3cin.448+64 _ZSt3cin.512+64 _ZSt3cin.576+1120 _ZSt3cin.1728+64 _ZSt3cin.1792+64 _ZSt3cin.1856+64 _ZSt3cin.1920+16 _ZSt3cin.1984+64 _ZSt3cin.2048+64 _ZSt3cin.2112+64 _ZSt3cin.2176+64 n _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 } same as _20
NONLOCAL = { ESCAPED NONLOCAL } same as _9
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZSt3cin.0+64 = { ESCAPED NONLOCAL }
_ZSt3cin.64+64 = { ESCAPED NONLOCAL }
_ZSt3cin.128+64 = { ESCAPED NONLOCAL }
_ZSt3cin.192+224 = { ESCAPED NONLOCAL }
_ZSt3cin.448+64 = { ESCAPED NONLOCAL }
_ZSt3cin.512+64 = { ESCAPED NONLOCAL }
_ZSt3cin.576+1120 = { ESCAPED NONLOCAL }
_ZSt3cin.1728+64 = { ESCAPED NONLOCAL }
_ZSt3cin.1792+64 = { ESCAPED NONLOCAL }
_ZSt3cin.1856+64 = { ESCAPED NONLOCAL }
_ZSt3cin.1920+16 = { ESCAPED NONLOCAL }
_ZSt3cin.1984+64 = { ESCAPED NONLOCAL }
_ZSt3cin.2048+64 = { ESCAPED NONLOCAL }
_ZSt3cin.2112+64 = { ESCAPED NONLOCAL }
_ZSt3cin.2176+64 = { ESCAPED NONLOCAL }
n = { ESCAPED NONLOCAL } same as n.0_1
_ZSt4cout.0+64 = { ESCAPED NONLOCAL }
_ZSt4cout.64+64 = { ESCAPED NONLOCAL }
_ZSt4cout.128+224 = { ESCAPED NONLOCAL }
_ZSt4cout.384+64 = { ESCAPED NONLOCAL }
_ZSt4cout.448+64 = { ESCAPED NONLOCAL }
_ZSt4cout.512+1120 = { ESCAPED NONLOCAL }
_ZSt4cout.1664+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1728+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1792+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1856+16 = { ESCAPED NONLOCAL }
_ZSt4cout.1920+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1984+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2048+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2112+64 = { ESCAPED NONLOCAL }
_ZNSirsERi = { }
_ZNSolsEi = { }
_9 = { ESCAPED NONLOCAL }
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_.isra.0 = { }
_11 = { ESCAPED NONLOCAL } same as _9
b_13 = { NULL NONLOCAL }
a_2 = { NULL NONLOCAL }
b_3 = { NULL NONLOCAL }
_15 = { ESCAPED NONLOCAL } same as _9
_20 = { NULL ESCAPED NONLOCAL _ZSt3cin.0+64 _ZSt3cin.64+64 _ZSt3cin.128+64 _ZSt3cin.192+224 _ZSt3cin.448+64 _ZSt3cin.512+64 _ZSt3cin.576+1120 _ZSt3cin.1728+64 _ZSt3cin.1792+64 _ZSt3cin.1856+64 _ZSt3cin.1920+16 _ZSt3cin.1984+64 _ZSt3cin.2048+64 _ZSt3cin.2112+64 _ZSt3cin.2176+64 n _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 }
_21 = { ESCAPED NONLOCAL }
_22 = { ESCAPED NONLOCAL } same as _21
_23 = { ESCAPED NONLOCAL }
_27 = { ESCAPED NONLOCAL }
_ZSt16__throw_bad_castv = { }
_30 = { ESCAPED NONLOCAL }
_32 = { ESCAPED NONLOCAL }
_ZNKSt5ctypeIcE13_M_widen_initEv = { }
_35 = { ESCAPED NONLOCAL }
_36 = { ESCAPED NONLOCAL }
PROF_39 = { ANYTHING }
_41 = { ESCAPED NONLOCAL } same as _9
_37 = { ESCAPED NONLOCAL } same as _9
_34 = { ESCAPED NONLOCAL }
_ZNSo3putEc = { }
_25 = { ESCAPED NONLOCAL } same as _9
_ZNSo5flushEv = { }
_26 = { ESCAPED NONLOCAL } same as _9
i_16 = { NONLOCAL }
i_4 = { NONLOCAL } same as i_16
n.0_1 = { ESCAPED NONLOCAL }
main = { }


Alias information for int main()

Aliased symbols

n, UID D.44618, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.44603 D.44604 D.44618 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_11, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_15, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_20, points-to non-local, points-to escaped, points-to NULL, points-to vars: { D.44603 D.44604 D.44618 } (nonlocal, escaped, interposable)
_23, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_25, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_26, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_27, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_35, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_36, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
PROF_39, points-to anything, points-to NULL

int main ()
{
  char_type D.49557;
  char_type D.49554;
  char_type D.49551;
  char_type D.49548;
  int n;
  int i;
  int b;
  int a;
  int n.0_1;
  struct basic_ostream & _9;
  struct basic_ostream & _11;
  struct basic_ostream & _15;
  int (*) () * _20;
  long int _21;
  sizetype _22;
  struct basic_ios * _23;
  struct basic_ostream & _25;
  struct basic_ostream & _26;
  const struct __ctype_type * _27;
  char _30;
  char _32;
  char _34;
  int (*) () * _35;
  int (*) () _36;
  char _37;
  void * PROF_39;
  char _41;

  <bb 2> [local count: 118111600]:
  std::basic_istream<char>::operator>> (&cin, &n);
  _9 = std::basic_ostream<char>::operator<< (&cout, 0);
  std::endl.isra (_9);
  _11 = std::basic_ostream<char>::operator<< (&cout, 1);
  std::endl.isra (_11);
  goto <bb 11>; [100.00%]

  <bb 3> [local count: 952547452]:
  b_13 = a_2 + b_3;
  _15 = std::basic_ostream<char>::operator<< (&cout, b_13);
  _20 = _15->_vptr.basic_ostream;
  _21 = MEM[(long int *)_20 + -24B];
  _22 = (sizetype) _21;
  _23 = _15 + _22;
  _27 = MEM[(const struct __ctype_type * *)_23 + 240B];
  if (_27 == 0B)
    goto <bb 4>; [0.04%]
  else
    goto <bb 5>; [99.96%]

  <bb 4> [local count: 381018]:
  std::__throw_bad_cast ();

  <bb 5> [local count: 952166433]:
  _30 = MEM[(const struct ctype *)_27]._M_widen_ok;
  if (_30 != 0)
    goto <bb 6>; [51.12%]
  else
    goto <bb 7>; [48.88%]

  <bb 6> [local count: 486747484]:
  _32 = MEM[(const struct ctype *)_27]._M_widen[10];
  goto <bb 10>; [100.00%]

  <bb 7> [local count: 465418949]:
  std::ctype<char>::_M_widen_init (_27);
  _35 = MEM[(const struct ctype *)_27].D.37636._vptr.facet;
  _36 = MEM[(int (*) () *)_35 + 48B];
  PROF_39 = [obj_type_ref] OBJ_TYPE_REF(_36;(const struct ctype)_27->6);
  if (PROF_39 == do_widen)
    goto <bb 9>; [80.00%]
  else
    goto <bb 8>; [20.00%]

  <bb 8> [local count: 93083792]:
  _41 = OBJ_TYPE_REF(_36;(const struct ctype)_27->6) (_27, 10);

  <bb 9> [local count: 465418949]:
  # _37 = PHI <_41(8), 10(7)>

  <bb 10> [local count: 952166435]:
  # _34 = PHI <_32(6), _37(9)>
  _25 = std::basic_ostream<char>::put (_15, _34);
  _26 = std::basic_ostream<char>::flush (_25);
  i_16 = i_4 + 1;

  <bb 11> [local count: 1070278034]:
  # a_2 = PHI <0(2), b_3(10)>
  # b_3 = PHI <1(2), b_13(10)>
  # i_4 = PHI <1(2), i_16(10)>
  n.0_1 = n;
  if (n.0_1 > i_4)
    goto <bb 3>; [89.00%]
  else
    goto <bb 12>; [11.00%]

  <bb 12> [local count: 117730583]:
  n ={v} {CLOBBER};
  return 0;

}



;; Function _GLOBAL__sub_I_main (_GLOBAL__sub_I_main, funcdef_no=2295, decl_uid=49420, cgraph_uid=1029, symbol_order=1204) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZStL8__ioinit = NONLOCAL
ESCAPED = &_ZStL8__ioinit
ESCAPED = &_ZNSt8ios_base4InitD1Ev
ESCAPED = &_ZStL8__ioinit
__dso_handle = NONLOCAL
ESCAPED = &__dso_handle

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 8 9 10 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*_ZStL8__ioinit";
"*_ZNSt8ios_base4InitD1Ev";
"*__dso_handle";
"*_ZNSt8ios_base4InitC1Ev";
"*__cxa_atexit";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "__dso_handle";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";

  // Edges in the constraint graph:
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "__dso_handle";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZStL8__ioinit";
"STOREDANYTHING" -> "_ZNSt8ios_base4InitD1Ev";
"STOREDANYTHING" -> "__dso_handle";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "_ZNSt8ios_base4InitD1Ev";
"NONLOCAL" -> "__dso_handle";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZStL8__ioinit";
"STOREDANYTHING" -> "_ZNSt8ios_base4InitD1Ev";
"STOREDANYTHING" -> "__dso_handle";
"_ZStL8__ioinit" -> "ESCAPED";
"_ZNSt8ios_base4InitD1Ev" -> "ESCAPED";
"__dso_handle" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZStL8__ioinit = { ESCAPED NONLOCAL }
_ZNSt8ios_base4InitD1Ev = { ESCAPED NONLOCAL }
__dso_handle = { ESCAPED NONLOCAL }
_ZNSt8ios_base4InitC1Ev = { }
__cxa_atexit = { }


Alias information for (static initializers for Fibonacci.cpp)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.44611 D.49419 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information


void _GLOBAL__sub_I_main ()
{
  <bb 2> [local count: 1073741824]:
  std::ios_base::Init::Init (&__ioinit);
  __cxxabiv1::__cxa_atexit (__dt_comp , &__ioinit, &__dso_handle);
  return;

}


