
;; Function main (main, funcdef_no=1727, decl_uid=43719, cgraph_uid=461, symbol_order=491)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 8
New elimination table:
Can't eliminate 64 to 2 (offset=0, prev_offset=0)
Can eliminate 64 to 8 (offset=0, prev_offset=0)
Can't eliminate 65 to 2 (offset=0, prev_offset=0)
Can eliminate 65 to 8 (offset=-16, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) r  (1) T {*movdi_64bit}
            2 Scratch win: reject+=2
            2 Matched conflict early clobber reloads: reject--
          alt=0,overall=7,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) m  (2) =&r {stack_protect_set_di}
      Creating newreg=105 from oldreg=102, assigning class GR_REGS to r105
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=2,overall=22,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) m  (1) rJ {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) T {*movdi_64bit}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) m  (1) rJ {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) T {*movdi_64bit}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) m  (1) rJ {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) r  (2) I {adddi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) T {*movdi_64bit}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (1) U {call_value_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) m {extendsidi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) T {*movdi_64bit}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (1) U {call_value_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) T {*movdi_64bit}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (1) U {call_value_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) m {extendsidi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) T {*movdi_64bit}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 27:  (1) U {call_value_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) T {*movdi_64bit}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (1) U {call_value_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) m {extendsidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) m  (1) rJ {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) m {extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) r {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) m {extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) =r  (1) r {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =r  (1) r  (2) r {addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 42:  (0) m  (1) rJ {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) m {extendsidi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) T {*movdi_64bit}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 46:  (1) U {call_value_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) T {*movdi_64bit}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (1) U {call_value_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) m {extendsidi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) m  (1) rJ {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 53:  (0) r  (1) m {extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =r  (1) r {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) r  (2) I {addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 56:  (0) m  (1) rJ {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 59:  (0) r  (1) m {extendsidi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) m {extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) =r  (1) r {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) r {extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (2) r  (3) rJ {*branchdi}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 67:  (0) r  (1) T {*movdi_64bit}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 74:  (0) r  (1) T {*movdi_64bit}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) =r  (1) m  (2) m  (3) =&r {stack_protect_test_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (2) r  (3) rJ {*branchdi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 77:  (0) U {call_internal}
	   Spilling non-eliminable hard regs: 8

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 6
   Insn 77: point = 0, n_alt = 2
  BB 7
   Insn 81: point = 0, n_alt = -1
   Insn 80: point = 0, n_alt = -2
  BB 5
   Insn 76: point = 2, n_alt = 0
   Insn 75: point = 3, n_alt = 0
   Insn 74: point = 5, n_alt = 1
   Insn 70: point = 6, n_alt = -2
   Insn 67: point = 8, n_alt = 1
  BB 4
   Insn 65: point = 9, n_alt = 0
   Insn 64: point = 10, n_alt = -2
   Insn 63: point = 12, n_alt = 0
   Insn 62: point = 14, n_alt = 0
   Insn 61: point = 16, n_alt = 1
   Insn 59: point = 17, n_alt = 1
  BB 2
   Insn 85: point = 18, n_alt = -1
   Insn 31: point = 18, n_alt = 2
   Insn 30: point = 18, n_alt = -2
   Insn 29: point = 19, n_alt = 1
   Insn 28: point = 19, n_alt = -2
   Insn 27: point = 20, n_alt = 2
   Insn 26: point = 20, n_alt = 1
   Insn 25: point = 20, n_alt = -2
   Insn 24: point = 21, n_alt = 1
   Insn 23: point = 22, n_alt = 2
   Insn 22: point = 22, n_alt = -2
   Insn 21: point = 23, n_alt = 1
   Insn 20: point = 23, n_alt = -2
   Insn 19: point = 24, n_alt = 2
   Insn 18: point = 24, n_alt = 1
   Insn 17: point = 24, n_alt = -2
   Insn 16: point = 25, n_alt = 1
   Insn 15: point = 26, n_alt = 2
   Insn 14: point = 26, n_alt = 1
   Insn 13: point = 26, n_alt = -2
   Insn 12: point = 27, n_alt = 1
   Insn 11: point = 28, n_alt = 3
   Insn 10: point = 29, n_alt = 1
   Insn 9: point = 30, n_alt = 3
   Insn 8: point = 31, n_alt = 1
   Insn 7: point = 32, n_alt = 3
   Insn 4: point = 32, n_alt = 0
   Insn 3: point = 34, n_alt = 1
  BB 3
   Insn 56: point = 35, n_alt = 3
   Insn 55: point = 36, n_alt = 1
   Insn 54: point = 38, n_alt = 0
   Insn 53: point = 40, n_alt = 1
   Insn 52: point = 41, n_alt = 3
   Insn 51: point = 42, n_alt = 1
   Insn 50: point = 43, n_alt = 2
   Insn 49: point = 43, n_alt = -2
   Insn 48: point = 44, n_alt = 1
   Insn 47: point = 44, n_alt = -2
   Insn 46: point = 45, n_alt = 2
   Insn 45: point = 45, n_alt = 1
   Insn 44: point = 45, n_alt = -2
   Insn 43: point = 46, n_alt = 1
   Insn 42: point = 47, n_alt = 3
   Insn 41: point = 48, n_alt = 0
   Insn 40: point = 50, n_alt = 0
   Insn 39: point = 52, n_alt = 1
   Insn 38: point = 53, n_alt = 0
   Insn 37: point = 55, n_alt = 1
   Insn 36: point = 56, n_alt = 3
   Insn 35: point = 57, n_alt = 1
 r72: [22..23]
 r73: [18..19]
 r74: [43..44]
 r75: [11..17]
 r76: [7..8]
 r77: [0..6]
 r78: [33..34]
 r79: [30..31]
 r80: [28..29]
 r81: [26..27]
 r82: [24..25]
 r83: [20..21]
 r84: [56..57]
 r85: [47..48]
 r86: [49..53]
 r87: [54..55]
 r88: [49..50]
 r89: [51..52]
 r90: [45..46]
 r91: [41..42]
 r92: [35..36]
 r93: [37..38]
 r94: [39..40]
 r95: [13..14]
 r96: [15..16]
 r97: [9..12]
 r98: [9..10]
 r100: [4..5]
 r101: [2..3]
 r103: [3..4]
 r105: [32..33]
Compressing live ranges: from 58 to 53 - 91%
Ranges after the compression:
 r72: [18..19]
 r73: [14..15]
 r74: [39..40]
 r75: [8..13]
 r76: [4..5]
 r77: [0..3]
 r78: [29..30]
 r79: [26..27]
 r80: [24..25]
 r81: [22..23]
 r82: [20..21]
 r83: [16..17]
 r84: [51..52]
 r85: [43..44]
 r86: [45..48]
 r87: [49..50]
 r88: [45..46]
 r89: [47..48]
 r90: [41..42]
 r91: [37..38]
 r92: [31..32]
 r93: [33..34]
 r94: [35..36]
 r95: [10..11]
 r96: [12..13]
 r97: [6..9]
 r98: [6..7]
 r100: [2..3]
 r101: [0..1]
 r103: [1..2]
 r105: [28..29]

********** Assignment #1: **********

	 Assigning to 105 (cl=GR_REGS, orig=102, freq=1000, tfirst=105, tfreq=1000)...
	   Assign 14 to reload r105 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 8
	   Spilling non-eliminable hard regs: 8
New elimination table:
Can't eliminate 64 to 2 (offset=0, prev_offset=0)
Can eliminate 64 to 8 (offset=0, prev_offset=0)
Can't eliminate 65 to 2 (offset=0, prev_offset=0)
Can eliminate 65 to 8 (offset=-16, prev_offset=-16)
changing reg in insn 20
changing reg in insn 22
changing reg in insn 28
changing reg in insn 30
changing reg in insn 47
changing reg in insn 49
changing reg in insn 59
changing reg in insn 64
changing reg in insn 67
changing reg in insn 70
changing reg in insn 70
changing reg in insn 80
changing reg in insn 3
changing reg in insn 4
changing reg in insn 8
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 25
changing reg in insn 35
changing reg in insn 41
changing reg in insn 42
changing reg in insn 38
changing reg in insn 41
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 39
changing reg in insn 43
changing reg in insn 44
changing reg in insn 51
changing reg in insn 55
changing reg in insn 56
changing reg in insn 54
changing reg in insn 55
changing reg in insn 53
changing reg in insn 62
changing reg in insn 63
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 64
changing reg in insn 65
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 75
deleting insn with uid = 40.
deleting insn with uid = 54.
deleting insn with uid = 62.
deleting insn with uid = 64.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 77.


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [zero] 3 [gp] 4 [tp] 5 [t0] 6 [t1] 7 [t2] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 28 [t3] 29 [t4] 30 [t5] 31 [t6] 32 [ft0] 33 [ft1] 34 [ft2] 35 [ft3] 36 [ft4] 37 [ft5] 38 [ft6] 39 [ft7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 60 [ft8] 61 [ft9] 62 [ft10] 63 [ft11]
;;  hardware regs used 	
;;  regular block artificial uses 	 2 [sp] 8 [s0]
;;  eh block artificial uses 	 2 [sp] 8 [s0] 64 [arg] 65 [frame]
;;  entry block defs 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 65 [frame]
;;  exit block uses 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 65 [frame]
;;  regs ever live 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1] 13 [a3] 14 [a4] 15 [a5]
;;  ref usage 	r0={8d} r1={9d,1u} r2={1d,15u} r3={8d} r4={8d} r5={8d} r6={8d} r7={8d} r8={1d,27u} r10={17d,12u} r11={16d,7u} r12={9d} r13={10d} r14={13d,3u} r15={31d,22u} r16={9d} r17={9d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r60={8d} r61={8d} r62={8d} r63={8d} r65={1d,1u} 
;;    total ref usage 462{374d,88u,0e} in 60{52 regular + 8 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 5 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 4 2 (set (reg/f:DI 15 a5 [78])
        (symbol_ref:DI ("__stack_chk_guard") [flags 0x40]  <var_decl 0x7db1bbb13d80 __stack_chk_guard>)) "Fibonacci.cpp":4:12 135 {*movdi_64bit}
     (nil))
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 8 s0)
                        (const_int -24 [0xffffffffffffffe8])) [5 D.48643+0 S8 A64])
                (unspec:DI [
                        (mem/v/f/c:DI (reg/f:DI 15 a5 [78]) [5 __stack_chk_guard+0 S8 A64])
                    ] UNSPEC_FLE_QUIET))
            (set (reg:DI 14 a4 [102])
                (const_int 0 [0]))
        ]) "Fibonacci.cpp":4:12 268 {stack_protect_set_di}
     (nil))
(insn 7 4 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                (const_int -40 [0xffffffffffffffd8])) [6 a+0 S4 A64])
        (const_int 0 [0])) "Fibonacci.cpp":7:7 136 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 15 a5 [79])
        (const_int 1 [0x1])) "Fibonacci.cpp":8:7 135 {*movdi_64bit}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                (const_int -36 [0xffffffffffffffdc])) [6 b+0 S4 A32])
        (reg:SI 15 a5 [79])) "Fibonacci.cpp":8:7 136 {*movsi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 15 a5 [80])
        (const_int 1 [0x1])) "Fibonacci.cpp":9:7 135 {*movdi_64bit}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                (const_int -32 [0xffffffffffffffe0])) [6 i+0 S4 A128])
        (reg:SI 15 a5 [80])) "Fibonacci.cpp":9:7 136 {*movsi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 15 a5 [81])
        (plus:DI (reg/f:DI 8 s0)
            (const_int -44 [0xffffffffffffffd4]))) "Fibonacci.cpp":10:12 4 {adddi3}
     (nil))
(insn 13 12 14 2 (set (reg:DI 11 a1)
        (reg:DI 15 a5 [81])) "Fibonacci.cpp":10:12 135 {*movdi_64bit}
     (nil))
(insn 14 13 15 2 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZSt3cin") [flags 0x40]  <var_decl 0x7db1bbf71b40 cin>)) "Fibonacci.cpp":10:12 135 {*movdi_64bit}
     (nil))
(call_insn 15 14 16 2 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSirsERi") [flags 0x41]  <function_decl 0x7db1bbec1600 operator>>>) [0 operator>> S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":10:12 254 {call_value_internal}
     (nil)
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:DI (use (reg:DI 11 a1))
            (nil))))
(insn 16 15 17 2 (set (reg:DI 15 a5 [82])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -40 [0xffffffffffffffd8])) [6 a+0 S4 A64]))) "Fibonacci.cpp":11:13 90 {extendsidi2}
     (nil))
(insn 17 16 18 2 (set (reg:DI 11 a1)
        (reg:DI 15 a5 [82])) "Fibonacci.cpp":11:13 135 {*movdi_64bit}
     (nil))
(insn 18 17 19 2 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZSt4cout") [flags 0x40]  <var_decl 0x7db1bbf71cf0 cout>)) "Fibonacci.cpp":11:13 135 {*movdi_64bit}
     (nil))
(call_insn 19 18 20 2 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEi") [flags 0x41]  <function_decl 0x7db1bbe2f600 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":11:13 254 {call_value_internal}
     (nil)
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:SI (use (reg:DI 11 a1))
            (nil))))
(insn 20 19 21 2 (set (reg/f:DI 15 a5 [orig:72 _1 ] [72])
        (reg:DI 10 a0)) "Fibonacci.cpp":11:13 135 {*movdi_64bit}
     (nil))
(insn 21 20 22 2 (set (reg:DI 11 a1)
        (symbol_ref:DI ("_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_") [flags 0x41]  <function_decl 0x7db1bbe41700 endl>)) "Fibonacci.cpp":11:18 135 {*movdi_64bit}
     (nil))
(insn 22 21 23 2 (set (reg:DI 10 a0)
        (reg/f:DI 15 a5 [orig:72 _1 ] [72])) "Fibonacci.cpp":11:18 135 {*movdi_64bit}
     (nil))
(call_insn 23 22 24 2 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEPFRSoS_E") [flags 0x41]  <function_decl 0x7db1bbdfd900 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":11:18 254 {call_value_internal}
     (nil)
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:DI (use (reg:DI 11 a1))
            (nil))))
(insn 24 23 25 2 (set (reg:DI 15 a5 [83])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -36 [0xffffffffffffffdc])) [6 b+0 S4 A32]))) "Fibonacci.cpp":12:13 90 {extendsidi2}
     (nil))
(insn 25 24 26 2 (set (reg:DI 11 a1)
        (reg:DI 15 a5 [83])) "Fibonacci.cpp":12:13 135 {*movdi_64bit}
     (nil))
(insn 26 25 27 2 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZSt4cout") [flags 0x40]  <var_decl 0x7db1bbf71cf0 cout>)) "Fibonacci.cpp":12:13 135 {*movdi_64bit}
     (nil))
(call_insn 27 26 28 2 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEi") [flags 0x41]  <function_decl 0x7db1bbe2f600 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":12:13 254 {call_value_internal}
     (nil)
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:SI (use (reg:DI 11 a1))
            (nil))))
(insn 28 27 29 2 (set (reg/f:DI 15 a5 [orig:73 _2 ] [73])
        (reg:DI 10 a0)) "Fibonacci.cpp":12:13 135 {*movdi_64bit}
     (nil))
(insn 29 28 30 2 (set (reg:DI 11 a1)
        (symbol_ref:DI ("_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_") [flags 0x41]  <function_decl 0x7db1bbe41700 endl>)) "Fibonacci.cpp":12:18 135 {*movdi_64bit}
     (nil))
(insn 30 29 31 2 (set (reg:DI 10 a0)
        (reg/f:DI 15 a5 [orig:73 _2 ] [73])) "Fibonacci.cpp":12:18 135 {*movdi_64bit}
     (nil))
(call_insn 31 30 85 2 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEPFRSoS_E") [flags 0x41]  <function_decl 0x7db1bbdfd900 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":12:18 254 {call_value_internal}
     (nil)
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:DI (use (reg:DI 11 a1))
            (nil))))
(jump_insn 85 31 86 2 (set (pc)
        (label_ref 57)) "Fibonacci.cpp":13:5 240 {jump}
     (nil)
 -> 57)
(barrier 86 85 60)
(code_label 60 86 34 3 3 (nil) [1 uses])
(note 34 60 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 3 (set (reg:DI 15 a5 [84])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -36 [0xffffffffffffffdc])) [6 b+0 S4 A32]))) "Fibonacci.cpp":14:11 90 {extendsidi2}
     (nil))
(insn 36 35 37 3 (set (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                (const_int -28 [0xffffffffffffffe4])) [6 t+0 S4 A32])
        (reg:SI 15 a5 [84])) "Fibonacci.cpp":14:11 136 {*movsi_internal}
     (nil))
(insn 37 36 38 3 (set (reg:DI 15 a5 [87])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -36 [0xffffffffffffffdc])) [6 b+0 S4 A32]))) "Fibonacci.cpp":15:11 90 {extendsidi2}
     (nil))
(insn 38 37 39 3 (set (reg:SI 14 a4 [86])
        (reg:SI 15 a5 [87])) "Fibonacci.cpp":15:11 136 {*movsi_internal}
     (nil))
(insn 39 38 41 3 (set (reg:DI 15 a5 [89])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -40 [0xffffffffffffffd8])) [6 a+0 S4 A64]))) "Fibonacci.cpp":15:11 90 {extendsidi2}
     (nil))
(insn 41 39 42 3 (set (reg:SI 15 a5 [85])
        (plus:SI (reg:SI 14 a4 [86])
            (reg:SI 15 a5 [88]))) "Fibonacci.cpp":15:11 3 {addsi3}
     (nil))
(insn 42 41 43 3 (set (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                (const_int -36 [0xffffffffffffffdc])) [6 b+0 S4 A32])
        (reg:SI 15 a5 [85])) "Fibonacci.cpp":15:11 136 {*movsi_internal}
     (nil))
(insn 43 42 44 3 (set (reg:DI 15 a5 [90])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -36 [0xffffffffffffffdc])) [6 b+0 S4 A32]))) "Fibonacci.cpp":16:17 90 {extendsidi2}
     (nil))
(insn 44 43 45 3 (set (reg:DI 11 a1)
        (reg:DI 15 a5 [90])) "Fibonacci.cpp":16:17 135 {*movdi_64bit}
     (nil))
(insn 45 44 46 3 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZSt4cout") [flags 0x40]  <var_decl 0x7db1bbf71cf0 cout>)) "Fibonacci.cpp":16:17 135 {*movdi_64bit}
     (nil))
(call_insn 46 45 47 3 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEi") [flags 0x41]  <function_decl 0x7db1bbe2f600 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":16:17 254 {call_value_internal}
     (nil)
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:SI (use (reg:DI 11 a1))
            (nil))))
(insn 47 46 48 3 (set (reg/f:DI 15 a5 [orig:74 _3 ] [74])
        (reg:DI 10 a0)) "Fibonacci.cpp":16:17 135 {*movdi_64bit}
     (nil))
(insn 48 47 49 3 (set (reg:DI 11 a1)
        (symbol_ref:DI ("_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_") [flags 0x41]  <function_decl 0x7db1bbe41700 endl>)) "Fibonacci.cpp":16:22 135 {*movdi_64bit}
     (nil))
(insn 49 48 50 3 (set (reg:DI 10 a0)
        (reg/f:DI 15 a5 [orig:74 _3 ] [74])) "Fibonacci.cpp":16:22 135 {*movdi_64bit}
     (nil))
(call_insn 50 49 51 3 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEPFRSoS_E") [flags 0x41]  <function_decl 0x7db1bbdfd900 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":16:22 254 {call_value_internal}
     (nil)
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:DI (use (reg:DI 11 a1))
            (nil))))
(insn 51 50 52 3 (set (reg:DI 15 a5 [91])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -28 [0xffffffffffffffe4])) [6 t+0 S4 A32]))) "Fibonacci.cpp":17:11 90 {extendsidi2}
     (nil))
(insn 52 51 53 3 (set (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                (const_int -40 [0xffffffffffffffd8])) [6 a+0 S4 A64])
        (reg:SI 15 a5 [91])) "Fibonacci.cpp":17:11 136 {*movsi_internal}
     (nil))
(insn 53 52 55 3 (set (reg:DI 15 a5 [94])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -32 [0xffffffffffffffe0])) [6 i+0 S4 A128]))) "Fibonacci.cpp":18:11 90 {extendsidi2}
     (nil))
(insn 55 53 56 3 (set (reg:SI 15 a5 [92])
        (plus:SI (reg:SI 15 a5 [93])
            (const_int 1 [0x1]))) "Fibonacci.cpp":18:11 3 {addsi3}
     (nil))
(insn 56 55 57 3 (set (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                (const_int -32 [0xffffffffffffffe0])) [6 i+0 S4 A128])
        (reg:SI 15 a5 [92])) "Fibonacci.cpp":18:11 136 {*movsi_internal}
     (nil))
(code_label 57 56 58 4 2 (nil) [1 uses])
(note 58 57 59 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 61 4 (set (reg:DI 14 a4 [orig:75 n.0_4 ] [75])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -44 [0xffffffffffffffd4])) [6 n+0 S4 A32]))) "Fibonacci.cpp":13:14 90 {extendsidi2}
     (nil))
(insn 61 59 63 4 (set (reg:DI 15 a5 [96])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -32 [0xffffffffffffffe0])) [6 i+0 S4 A128]))) "Fibonacci.cpp":13:14 90 {extendsidi2}
     (nil))
(insn 63 61 65 4 (set (reg:DI 15 a5 [97])
        (sign_extend:DI (reg:SI 15 a5 [95]))) "Fibonacci.cpp":13:14 90 {extendsidi2}
     (nil))
(jump_insn 65 63 66 4 (set (pc)
        (if_then_else (lt (reg:DI 15 a5 [97])
                (reg:DI 14 a4 [98]))
            (label_ref 60)
            (pc))) "Fibonacci.cpp":13:14 182 {*branchdi}
     (nil)
 -> 60)
(note 66 65 67 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 70 5 (set (reg:DI 15 a5 [orig:76 _22 ] [76])
        (const_int 0 [0])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 70 67 74 5 (set (reg:DI 14 a4 [orig:77 <retval> ] [77])
        (reg:DI 15 a5 [orig:76 _22 ] [76])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 74 70 75 5 (set (reg/f:DI 15 a5 [100])
        (symbol_ref:DI ("__stack_chk_guard") [flags 0x40]  <var_decl 0x7db1bbb13d80 __stack_chk_guard>)) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 75 74 76 5 (parallel [
            (set (reg:DI 15 a5 [101])
                (unspec:DI [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 8 s0)
                                (const_int -24 [0xffffffffffffffe8])) [5 D.48643+0 S8 A64])
                        (mem/v/f/c:DI (reg/f:DI 15 a5 [100]) [5 __stack_chk_guard+0 S8 A64])
                    ] UNSPEC_COPYSIGN))
            (clobber (reg:DI 13 a3 [103]))
        ]) "Fibonacci.cpp":20:1 270 {stack_protect_test_di}
     (nil))
(jump_insn 76 75 83 5 (set (pc)
        (if_then_else (eq (reg:DI 15 a5 [101])
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "Fibonacci.cpp":20:1 182 {*branchdi}
     (nil)
 -> 79)
(note 83 76 77 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 77 83 78 6 (parallel [
            (call (mem:SI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7db1bbb59700 __stack_chk_fail>) [0 __stack_chk_fail S4 A32])
                (const_int 0 [0]))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":20:1 253 {call_internal}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(barrier 78 77 79)
(code_label 79 78 84 7 5 (nil) [1 uses])
(note 84 79 80 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 80 84 81 7 (set (reg/i:DI 10 a0)
        (reg:DI 14 a4 [orig:77 <retval> ] [77])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 81 80 87 7 (use (reg/i:DI 10 a0)) "Fibonacci.cpp":20:1 -1
     (nil))
(note 87 81 0 NOTE_INSN_DELETED)

;; Function __static_initialization_and_destruction_0 (_Z41__static_initialization_and_destruction_0ii, funcdef_no=2227, decl_uid=48619, cgraph_uid=961, symbol_order=1018)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 8
New elimination table:
Can't eliminate 64 to 2 (offset=0, prev_offset=0)
Can eliminate 64 to 8 (offset=0, prev_offset=0)
Can't eliminate 65 to 2 (offset=0, prev_offset=0)
Can eliminate 65 to 8 (offset=-16, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 3:  (0) =r  (1) r {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 4:  (0) m  (1) rJ {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) r {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=2,overall=21,losers=2,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) m  (1) rJ {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) m {extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) r {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =r  (1) r {extendsidi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) T {*movdi_64bit}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (2) r  (3) rJ {*branchdi}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) m {extendsidi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) =r  (1) r {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) r {extendsidi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) T {*movdi_64bit}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) r  (2) I {adddi3}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (2) r  (3) rJ {*branchdi}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) T {*movdi_64bit}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) U {call_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) T {*movdi_64bit}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) T {*movdi_64bit}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) T {*movdi_64bit}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (1) U {call_value_internal}
	   Spilling non-eliminable hard regs: 8

********** Inheritance #1: **********

EBB 2 3 4
EBB 6
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
  BB 6
   Insn 35: point = 0, n_alt = -1
  BB 4
   Insn 29: point = 0, n_alt = 2
   Insn 28: point = 0, n_alt = 1
   Insn 27: point = 0, n_alt = 1
   Insn 26: point = 0, n_alt = 1
   Insn 25: point = 0, n_alt = 2
   Insn 24: point = 0, n_alt = 1
  BB 3
   Insn 22: point = 0, n_alt = 0
   Insn 21: point = 1, n_alt = 1
   Insn 20: point = 3, n_alt = 1
   Insn 19: point = 4, n_alt = 0
   Insn 18: point = 6, n_alt = 0
   Insn 17: point = 8, n_alt = 1
  BB 2
   Insn 15: point = 9, n_alt = 0
   Insn 14: point = 10, n_alt = 1
   Insn 13: point = 11, n_alt = 0
   Insn 12: point = 13, n_alt = 0
   Insn 11: point = 15, n_alt = 1
   Insn 7: point = 16, n_alt = 3
   Insn 6: point = 17, n_alt = 0
   Insn 4: point = 19, n_alt = 3
   Insn 3: point = 20, n_alt = 0
   Insn 5: point = 22, n_alt = -2
   Insn 2: point = 23, n_alt = -2
 r72: [21..23]
 r73: [19..20]
 r74: [18..22]
 r75: [16..17]
 r76: [12..13]
 r77: [14..15]
 r78: [9..11]
 r79: [9..10]
 r80: [5..6]
 r81: [7..8]
 r82: [0..4]
 r83: [0..1]
 r84: [2..3]
Compressing live ranges: from 24 to 20 - 83%
Ranges after the compression:
 r72: [18..19]
 r73: [16..17]
 r74: [16..19]
 r75: [14..15]
 r76: [10..11]
 r77: [12..13]
 r78: [8..9]
 r79: [8..9]
 r80: [4..5]
 r81: [6..7]
 r82: [0..3]
 r83: [0..1]
 r84: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 8
	   Spilling non-eliminable hard regs: 8
New elimination table:
Can't eliminate 64 to 2 (offset=0, prev_offset=0)
Can eliminate 64 to 8 (offset=0, prev_offset=0)
Can't eliminate 65 to 2 (offset=0, prev_offset=0)
Can eliminate 65 to 8 (offset=-16, prev_offset=-16)
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 12
changing reg in insn 13
changing reg in insn 11
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 17
changing reg in insn 19
changing reg in insn 22
changing reg in insn 21
changing reg in insn 22
changing reg in insn 20
changing reg in insn 21
deleting insn with uid = 3.
deleting insn with uid = 12.
deleting insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 29.


__static_initialization_and_destruction_0

Dataflow summary:
;;  fully invalidated by EH 	 0 [zero] 3 [gp] 4 [tp] 5 [t0] 6 [t1] 7 [t2] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 28 [t3] 29 [t4] 30 [t5] 31 [t6] 32 [ft0] 33 [ft1] 34 [ft2] 35 [ft3] 36 [ft4] 37 [ft5] 38 [ft6] 39 [ft7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 60 [ft8] 61 [ft9] 62 [ft10] 63 [ft11]
;;  hardware regs used 	
;;  regular block artificial uses 	 2 [sp] 8 [s0]
;;  eh block artificial uses 	 2 [sp] 8 [s0] 64 [arg] 65 [frame]
;;  entry block defs 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 65 [frame]
;;  exit block uses 	 1 [ra] 2 [sp] 8 [s0] 65 [frame]
;;  regs ever live 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1] 12 [a2] 14 [a4] 15 [a5]
;;  ref usage 	r0={2d} r1={3d,1u} r2={1d,8u} r3={2d} r4={2d} r5={2d} r6={2d} r7={2d} r8={1d,10u} r10={5d,3u} r11={4d,2u} r12={4d,1u} r13={3d} r14={6d,3u} r15={10d,7u} r16={3d} r17={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r60={2d} r61={2d} r62={2d} r63={2d} r65={1d,1u} 
;;    total ref usage 148{112d,36u,0e} in 21{19 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 5 2 (set (reg:DI 15 a5 [72])
        (reg:DI 10 a0 [ __initialize_p ])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 5 2 4 2 (set (reg:DI 14 a4 [74])
        (reg:DI 11 a1 [ __priority ])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 4 5 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                (const_int -20 [0xffffffffffffffec])) [6 __initialize_p+0 S4 A32])
        (reg:SI 15 a5 [73])) "Fibonacci.cpp":20:1 136 {*movsi_internal}
     (nil))
(insn 6 4 7 2 (set (reg:SI 15 a5 [75])
        (reg:SI 14 a4 [74])) "Fibonacci.cpp":20:1 136 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                (const_int -24 [0xffffffffffffffe8])) [6 __priority+0 S4 A32])
        (reg:SI 15 a5 [75])) "Fibonacci.cpp":20:1 136 {*movsi_internal}
     (nil))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 13 2 (set (reg:DI 15 a5 [77])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -20 [0xffffffffffffffec])) [6 __initialize_p+0 S4 A32]))) "Fibonacci.cpp":20:1 90 {extendsidi2}
     (nil))
(insn 13 11 14 2 (set (reg:DI 14 a4 [78])
        (sign_extend:DI (reg:SI 15 a5 [76]))) "Fibonacci.cpp":20:1 90 {extendsidi2}
     (nil))
(insn 14 13 15 2 (set (reg:DI 15 a5 [79])
        (const_int 1 [0x1])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:DI 14 a4 [78])
                (reg:DI 15 a5 [79]))
            (label_ref:DI 36)
            (pc))) "Fibonacci.cpp":20:1 182 {*branchdi}
     (nil)
 -> 36)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 19 3 (set (reg:DI 15 a5 [81])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 8 s0)
                    (const_int -24 [0xffffffffffffffe8])) [6 __priority+0 S4 A32]))) "Fibonacci.cpp":20:1 90 {extendsidi2}
     (nil))
(insn 19 17 20 3 (set (reg:DI 14 a4 [82])
        (sign_extend:DI (reg:SI 15 a5 [80]))) "Fibonacci.cpp":20:1 90 {extendsidi2}
     (nil))
(insn 20 19 21 3 (set (reg:DI 15 a5 [84])
        (const_int 65536 [0x10000])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 21 20 22 3 (set (reg:DI 15 a5 [83])
        (plus:DI (reg:DI 15 a5 [84])
            (const_int -1 [0xffffffffffffffff]))) "Fibonacci.cpp":20:1 4 {adddi3}
     (expr_list:REG_EQUAL (const_int 65535 [0xffff])
        (nil)))
(jump_insn 22 21 23 3 (set (pc)
        (if_then_else (ne (reg:DI 14 a4 [82])
                (reg:DI 15 a5 [83]))
            (label_ref:DI 36)
            (pc))) "Fibonacci.cpp":20:1 182 {*branchdi}
     (nil)
 -> 36)
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7db1bbfb4510 __ioinit>)) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 135 {*movdi_64bit}
     (nil))
(call_insn 25 24 26 4 (parallel [
            (call (mem:SI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x7db1bc2bca00 __ct_comp >) [0 __ct_comp  S4 A32])
                (const_int 0 [0]))
            (clobber (reg:SI 1 ra))
        ]) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 253 {call_internal}
     (nil)
    (expr_list:DI (use (reg:DI 10 a0))
        (nil)))
(insn 26 25 27 4 (set (reg:DI 12 a2)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x7db1bbb13240 __dso_handle>)) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 135 {*movdi_64bit}
     (nil))
(insn 27 26 28 4 (set (reg:DI 11 a1)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7db1bbfb4510 __ioinit>)) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 135 {*movdi_64bit}
     (nil))
(insn 28 27 29 4 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x7db1bc2bcc00 __dt_comp >)) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 135 {*movdi_64bit}
     (nil))
(call_insn 29 28 36 4 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x7db1bbb32100 __cxa_atexit>) [0 __cxa_atexit S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 254 {call_value_internal}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:DI (use (reg:DI 11 a1))
            (expr_list:DI (use (reg:DI 12 a2))
                (nil)))))
(code_label 36 29 34 6 8 (nil) [2 uses])
(note 34 36 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 32 6 (const_int 0 [0]) "Fibonacci.cpp":20:1 255 {nop}
     (nil))
(code_label 32 35 33 5 6 (nil) [0 uses])
(note 33 32 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(note 37 33 0 NOTE_INSN_DELETED)

;; Function _GLOBAL__sub_I_main (_GLOBAL__sub_I_main, funcdef_no=2228, decl_uid=48625, cgraph_uid=962, symbol_order=1137)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 8
New elimination table:
Can't eliminate 64 to 2 (offset=0, prev_offset=0)
Can eliminate 64 to 8 (offset=0, prev_offset=0)
Can't eliminate 65 to 2 (offset=0, prev_offset=0)
Can eliminate 65 to 8 (offset=-16, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) r  (1) T {*movdi_64bit}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) r  (2) I {adddi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) T {*movdi_64bit}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) S {call_internal}
	   Spilling non-eliminable hard regs: 8

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 8: point = 0, n_alt = 1
   Insn 7: point = 0, n_alt = 1
   Insn 6: point = 0, n_alt = 1
   Insn 5: point = 1, n_alt = 1
 r72: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r72: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 8
	   Spilling non-eliminable hard regs: 8
New elimination table:
Can't eliminate 64 to 2 (offset=0, prev_offset=0)
Can eliminate 64 to 8 (offset=0, prev_offset=0)
Can't eliminate 65 to 2 (offset=0, prev_offset=0)
Can eliminate 65 to 8 (offset=-16, prev_offset=-16)
changing reg in insn 5
changing reg in insn 6
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.


_GLOBAL__sub_I_main

Dataflow summary:
;;  fully invalidated by EH 	 0 [zero] 3 [gp] 4 [tp] 5 [t0] 6 [t1] 7 [t2] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 28 [t3] 29 [t4] 30 [t5] 31 [t6] 32 [ft0] 33 [ft1] 34 [ft2] 35 [ft3] 36 [ft4] 37 [ft5] 38 [ft6] 39 [ft7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 60 [ft8] 61 [ft9] 62 [ft10] 63 [ft11]
;;  hardware regs used 	
;;  regular block artificial uses 	 2 [sp] 8 [s0]
;;  eh block artificial uses 	 2 [sp] 8 [s0] 64 [arg] 65 [frame]
;;  entry block defs 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 65 [frame]
;;  exit block uses 	 1 [ra] 2 [sp] 8 [s0] 65 [frame]
;;  regs ever live 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1] 15 [a5]
;;  ref usage 	r0={1d} r1={2d,1u} r2={1d,3u} r3={1d} r4={1d} r5={1d} r6={1d} r7={1d} r8={1d,2u} r10={3d,1u} r11={3d,1u} r12={2d} r13={2d} r14={2d} r15={3d,1u} r16={2d} r17={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r60={1d} r61={1d} r62={1d} r63={1d} r65={1d,1u} 
;;    total ref usage 72{62d,10u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 15 a5 [72])
        (const_int 65536 [0x10000])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 6 5 7 2 (set (reg:DI 11 a1)
        (plus:DI (reg:DI 15 a5 [72])
            (const_int -1 [0xffffffffffffffff]))) "Fibonacci.cpp":20:1 4 {adddi3}
     (expr_list:REG_EQUAL (const_int 65535 [0xffff])
        (nil)))
(insn 7 6 8 2 (set (reg:DI 10 a0)
        (const_int 1 [0x1])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(call_insn 8 7 11 2 (parallel [
            (call (mem:SI (symbol_ref:DI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 0x7db1bbb32000 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S4 A32])
                (const_int 0 [0]))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":20:1 253 {call_internal}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (reg:DI 10 a0))
        (expr_list:SI (use (reg:DI 11 a1))
            (nil))))
(note 11 8 0 NOTE_INSN_DELETED)
