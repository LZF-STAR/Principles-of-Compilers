
;; Function main (main, funcdef_no=1727, decl_uid=43719, cgraph_uid=461, symbol_order=491)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 8 count 9 (  1.1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 6 }
;; 6 succs { }
;; 7 succs { 1 }
Removing SCRATCH to p102 in insn #4 (nop 2)
rescanning insn with uid = 4.
Removing SCRATCH to p103 in insn #75 (nop 3)
rescanning insn with uid = 75.
Building IRA IR
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 77.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 8 count 9 (  1.1)

Pass 0 for finding pseudo/allocno costs

    r103: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a3 (r103,l0) best GR_REGS, allocno GR_REGS
    r102: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a30 (r102,l0) best GR_REGS, allocno GR_REGS
    r101: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a1 (r101,l0) best GR_REGS, allocno GR_REGS
    r100: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a2 (r100,l0) best GR_REGS, allocno GR_REGS
    r98: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a5 (r98,l0) best GR_REGS, allocno GR_REGS
    r97: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a6 (r97,l0) best GR_REGS, allocno GR_REGS
    r96: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a9 (r96,l0) best GR_REGS, allocno GR_REGS
    r95: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a8 (r95,l0) best GR_REGS, allocno GR_REGS
    r94: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a12 (r94,l0) best GR_REGS, allocno GR_REGS
    r93: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a11 (r93,l0) best GR_REGS, allocno GR_REGS
    r92: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a10 (r92,l0) best GR_REGS, allocno GR_REGS
    r91: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a13 (r91,l0) best GR_REGS, allocno GR_REGS
    r90: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a15 (r90,l0) best GR_REGS, allocno GR_REGS
    r89: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a19 (r89,l0) best GR_REGS, allocno GR_REGS
    r88: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a17 (r88,l0) best GR_REGS, allocno GR_REGS
    r87: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a20 (r87,l0) best GR_REGS, allocno GR_REGS
    r86: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a18 (r86,l0) best GR_REGS, allocno GR_REGS
    r85: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a16 (r85,l0) best GR_REGS, allocno GR_REGS
    r84: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a21 (r84,l0) best GR_REGS, allocno GR_REGS
    r83: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a23 (r83,l0) best GR_REGS, allocno GR_REGS
    r82: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a25 (r82,l0) best GR_REGS, allocno GR_REGS
    r81: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a26 (r81,l0) best GR_REGS, allocno GR_REGS
    r80: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a27 (r80,l0) best GR_REGS, allocno GR_REGS
    r79: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a28 (r79,l0) best GR_REGS, allocno GR_REGS
    r78: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a29 (r78,l0) best GR_REGS, allocno GR_REGS
    r77: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a0 (r77,l0) best GR_REGS, allocno GR_REGS
    r76: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a4 (r76,l0) best GR_REGS, allocno GR_REGS
    r75: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a7 (r75,l0) best GR_REGS, allocno GR_REGS
    r74: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a14 (r74,l0) best GR_REGS, allocno GR_REGS
    r73: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a22 (r73,l0) best GR_REGS, allocno GR_REGS
    r72: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a24 (r72,l0) best GR_REGS, allocno GR_REGS

  a0(r77,l0) costs: SIBCALL_REGS:2000 JALR_REGS:2000 GR_REGS:2000 MEM:6000
  a1(r101,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a2(r100,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a3(r103,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:5000
  a4(r76,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:2000
  a5(r98,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a6(r97,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a7(r75,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a8(r95,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:2000
  a9(r96,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a10(r92,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a11(r93,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a12(r94,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a13(r91,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a14(r74,l0) costs: SIBCALL_REGS:4000 JALR_REGS:4000 GR_REGS:4000 MEM:10000
  a15(r90,l0) costs: SIBCALL_REGS:2000 JALR_REGS:2000 GR_REGS:2000 MEM:10000
  a16(r85,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a17(r88,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a18(r86,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a19(r89,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a20(r87,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a21(r84,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a22(r73,l0) costs: SIBCALL_REGS:4000 JALR_REGS:4000 GR_REGS:4000 MEM:10000
  a23(r83,l0) costs: SIBCALL_REGS:2000 JALR_REGS:2000 GR_REGS:2000 MEM:10000
  a24(r72,l0) costs: SIBCALL_REGS:4000 JALR_REGS:4000 GR_REGS:4000 MEM:10000
  a25(r82,l0) costs: SIBCALL_REGS:2000 JALR_REGS:2000 GR_REGS:2000 MEM:10000
  a26(r81,l0) costs: SIBCALL_REGS:22000 JALR_REGS:22000 GR_REGS:22000 MEM:30000
  a27(r80,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a28(r79,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a29(r78,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a30(r102,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:5000

   Insn 81(l0): point = 0
   Insn 80(l0): point = 2
   Insn 77(l0): point = 5
   Insn 76(l0): point = 8
   Insn 75(l0): point = 10
   Insn 74(l0): point = 12
   Insn 70(l0): point = 14
   Insn 67(l0): point = 16
   Insn 56(l0): point = 19
   Insn 55(l0): point = 21
   Insn 54(l0): point = 23
   Insn 53(l0): point = 25
   Insn 52(l0): point = 27
   Insn 51(l0): point = 29
   Insn 50(l0): point = 31
   Insn 49(l0): point = 33
   Insn 48(l0): point = 35
   Insn 47(l0): point = 37
   Insn 46(l0): point = 39
   Insn 45(l0): point = 41
   Insn 44(l0): point = 43
   Insn 43(l0): point = 45
   Insn 42(l0): point = 47
   Insn 41(l0): point = 49
   Insn 40(l0): point = 51
   Insn 39(l0): point = 53
   Insn 38(l0): point = 55
   Insn 37(l0): point = 57
   Insn 36(l0): point = 59
   Insn 35(l0): point = 61
   Insn 65(l0): point = 64
   Insn 64(l0): point = 66
   Insn 63(l0): point = 68
   Insn 62(l0): point = 70
   Insn 61(l0): point = 72
   Insn 59(l0): point = 74
   Insn 85(l0): point = 77
   Insn 31(l0): point = 79
   Insn 30(l0): point = 81
   Insn 29(l0): point = 83
   Insn 28(l0): point = 85
   Insn 27(l0): point = 87
   Insn 26(l0): point = 89
   Insn 25(l0): point = 91
   Insn 24(l0): point = 93
   Insn 23(l0): point = 95
   Insn 22(l0): point = 97
   Insn 21(l0): point = 99
   Insn 20(l0): point = 101
   Insn 19(l0): point = 103
   Insn 18(l0): point = 105
   Insn 17(l0): point = 107
   Insn 16(l0): point = 109
   Insn 15(l0): point = 111
   Insn 14(l0): point = 113
   Insn 13(l0): point = 115
   Insn 12(l0): point = 117
   Insn 11(l0): point = 119
   Insn 10(l0): point = 121
   Insn 9(l0): point = 123
   Insn 8(l0): point = 125
   Insn 7(l0): point = 127
   Insn 4(l0): point = 129
   Insn 3(l0): point = 131
 a0(r77): [8..14] [3..4]
 a1(r101): [9..10]
 a2(r100): [11..12]
 a3(r103): [10..10]
 a4(r76): [15..16]
 a5(r98): [65..66]
 a6(r97): [65..68]
 a7(r75): [67..74]
 a8(r95): [69..70]
 a9(r96): [71..72]
 a10(r92): [20..21]
 a11(r93): [22..23]
 a12(r94): [24..25]
 a13(r91): [28..29]
 a14(r74): [34..37]
 a15(r90): [44..45]
 a16(r85): [48..49]
 a17(r88): [50..51]
 a18(r86): [50..55]
 a19(r89): [52..53]
 a20(r87): [56..57]
 a21(r84): [60..61]
 a22(r73): [82..85]
 a23(r83): [92..93]
 a24(r72): [98..101]
 a25(r82): [108..109]
 a26(r81): [116..117]
 a27(r80): [120..121]
 a28(r79): [124..125]
 a29(r78): [130..131]
 a30(r102): [129..129]
Compressing live ranges: from 134 to 55 - 41%
Ranges after the compression:
 a0(r77): [0..5]
 a1(r101): [2..3]
 a2(r100): [4..5]
 a3(r103): [3..3]
 a4(r76): [6..7]
 a5(r98): [30..31]
 a6(r97): [30..33]
 a7(r75): [32..37]
 a8(r95): [34..35]
 a9(r96): [36..37]
 a10(r92): [8..9]
 a11(r93): [10..11]
 a12(r94): [12..13]
 a13(r91): [14..15]
 a14(r74): [16..17]
 a15(r90): [18..19]
 a16(r85): [20..21]
 a17(r88): [22..23]
 a18(r86): [22..25]
 a19(r89): [24..25]
 a20(r87): [26..27]
 a21(r84): [28..29]
 a22(r73): [38..39]
 a23(r83): [40..41]
 a24(r72): [42..43]
 a25(r82): [44..45]
 a26(r81): [46..47]
 a27(r80): [48..49]
 a28(r79): [50..51]
 a29(r78): [53..54]
 a30(r102): [52..52]
  regions=1, blocks=8, points=55
    allocnos=31 (big 0), copies=0, conflicts=0, ranges=31
Disposition:
   24:r72  l0    15   22:r73  l0    15   14:r74  l0    15    7:r75  l0    14
    4:r76  l0    15    0:r77  l0    14   29:r78  l0    15   28:r79  l0    15
   27:r80  l0    15   26:r81  l0    15   25:r82  l0    15   23:r83  l0    15
   21:r84  l0    15   16:r85  l0    15   18:r86  l0    14   20:r87  l0    15
   17:r88  l0    15   19:r89  l0    15   15:r90  l0    15   13:r91  l0    15
   10:r92  l0    15   11:r93  l0    15   12:r94  l0    15    8:r95  l0    15
    9:r96  l0    15    6:r97  l0    15    5:r98  l0    14    2:r100 l0    15
    1:r101 l0    15   30:r102 l0    15    3:r103 l0    13
+++Costs: overall 42000, reg 42000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [zero] 3 [gp] 4 [tp] 5 [t0] 6 [t1] 7 [t2] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 28 [t3] 29 [t4] 30 [t5] 31 [t6] 32 [ft0] 33 [ft1] 34 [ft2] 35 [ft3] 36 [ft4] 37 [ft5] 38 [ft6] 39 [ft7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 60 [ft8] 61 [ft9] 62 [ft10] 63 [ft11]
;;  hardware regs used 	 2 [sp] 64 [arg] 65 [frame]
;;  regular block artificial uses 	 2 [sp] 8 [s0] 64 [arg] 65 [frame]
;;  eh block artificial uses 	 2 [sp] 8 [s0] 64 [arg] 65 [frame]
;;  entry block defs 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 64 [arg] 65 [frame]
;;  exit block uses 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 65 [frame]
;;  regs ever live 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1]
;;  ref usage 	r0={8d} r1={9d,1u} r2={1d,15u} r3={8d} r4={8d} r5={8d} r6={8d} r7={8d} r8={1d,7u} r10={17d,12u} r11={16d,7u} r12={9d} r13={9d} r14={9d} r15={9d} r16={9d} r17={9d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r60={8d} r61={8d} r62={8d} r63={8d} r64={1d,6u} r65={1d,27u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d} r103={1d} 
;;    total ref usage 483{379d,104u,0e} in 64{56 regular + 8 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 5 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 4 2 (set (reg/f:DI 78)
        (symbol_ref:DI ("__stack_chk_guard") [flags 0x40]  <var_decl 0x7db1bbb13d80 __stack_chk_guard>)) "Fibonacci.cpp":4:12 135 {*movdi_64bit}
     (nil))
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 65 frame)
                        (const_int -8 [0xfffffffffffffff8])) [5 D.48643+0 S8 A64])
                (unspec:DI [
                        (mem/v/f/c:DI (reg/f:DI 78) [5 __stack_chk_guard+0 S8 A64])
                    ] UNSPEC_FLE_QUIET))
            (set (reg:DI 102)
                (const_int 0 [0]))
        ]) "Fibonacci.cpp":4:12 268 {stack_protect_set_di}
     (expr_list:REG_DEAD (reg/f:DI 78)
        (expr_list:REG_UNUSED (reg:DI 102)
            (nil))))
(insn 7 4 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                (const_int -24 [0xffffffffffffffe8])) [6 a+0 S4 A64])
        (const_int 0 [0])) "Fibonacci.cpp":7:7 136 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 79)
        (const_int 1 [0x1])) "Fibonacci.cpp":8:7 135 {*movdi_64bit}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                (const_int -20 [0xffffffffffffffec])) [6 b+0 S4 A32])
        (subreg:SI (reg:DI 79) 0)) "Fibonacci.cpp":8:7 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 79)
        (nil)))
(insn 10 9 11 2 (set (reg:DI 80)
        (const_int 1 [0x1])) "Fibonacci.cpp":9:7 135 {*movdi_64bit}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                (const_int -16 [0xfffffffffffffff0])) [6 i+0 S4 A128])
        (subreg:SI (reg:DI 80) 0)) "Fibonacci.cpp":9:7 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 80)
        (nil)))
(insn 12 11 13 2 (set (reg:DI 81)
        (plus:DI (reg/f:DI 65 frame)
            (const_int -28 [0xffffffffffffffe4]))) "Fibonacci.cpp":10:12 4 {adddi3}
     (nil))
(insn 13 12 14 2 (set (reg:DI 11 a1)
        (reg:DI 81)) "Fibonacci.cpp":10:12 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 81)
        (nil)))
(insn 14 13 15 2 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZSt3cin") [flags 0x40]  <var_decl 0x7db1bbf71b40 cin>)) "Fibonacci.cpp":10:12 135 {*movdi_64bit}
     (nil))
(call_insn 15 14 16 2 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSirsERi") [flags 0x41]  <function_decl 0x7db1bbec1600 operator>>>) [0 operator>> S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":10:12 254 {call_value_internal}
     (expr_list:REG_DEAD (reg:DI 11 a1)
        (expr_list:REG_UNUSED (reg:DI 10 a0)
            (nil)))
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:DI (use (reg:DI 11 a1))
            (nil))))
(insn 16 15 17 2 (set (reg:DI 82)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -24 [0xffffffffffffffe8])) [6 a+0 S4 A64]))) "Fibonacci.cpp":11:13 90 {extendsidi2}
     (nil))
(insn 17 16 18 2 (set (reg:DI 11 a1)
        (reg:DI 82)) "Fibonacci.cpp":11:13 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 82)
        (nil)))
(insn 18 17 19 2 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZSt4cout") [flags 0x40]  <var_decl 0x7db1bbf71cf0 cout>)) "Fibonacci.cpp":11:13 135 {*movdi_64bit}
     (nil))
(call_insn 19 18 20 2 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEi") [flags 0x41]  <function_decl 0x7db1bbe2f600 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":11:13 254 {call_value_internal}
     (expr_list:REG_DEAD (reg:DI 11 a1)
        (nil))
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:SI (use (reg:DI 11 a1))
            (nil))))
(insn 20 19 21 2 (set (reg/f:DI 72 [ _1 ])
        (reg:DI 10 a0)) "Fibonacci.cpp":11:13 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 10 a0)
        (nil)))
(insn 21 20 22 2 (set (reg:DI 11 a1)
        (symbol_ref:DI ("_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_") [flags 0x41]  <function_decl 0x7db1bbe41700 endl>)) "Fibonacci.cpp":11:18 135 {*movdi_64bit}
     (nil))
(insn 22 21 23 2 (set (reg:DI 10 a0)
        (reg/f:DI 72 [ _1 ])) "Fibonacci.cpp":11:18 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg/f:DI 72 [ _1 ])
        (nil)))
(call_insn 23 22 24 2 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEPFRSoS_E") [flags 0x41]  <function_decl 0x7db1bbdfd900 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":11:18 254 {call_value_internal}
     (expr_list:REG_DEAD (reg:DI 11 a1)
        (expr_list:REG_UNUSED (reg:DI 10 a0)
            (nil)))
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:DI (use (reg:DI 11 a1))
            (nil))))
(insn 24 23 25 2 (set (reg:DI 83)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -20 [0xffffffffffffffec])) [6 b+0 S4 A32]))) "Fibonacci.cpp":12:13 90 {extendsidi2}
     (nil))
(insn 25 24 26 2 (set (reg:DI 11 a1)
        (reg:DI 83)) "Fibonacci.cpp":12:13 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 83)
        (nil)))
(insn 26 25 27 2 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZSt4cout") [flags 0x40]  <var_decl 0x7db1bbf71cf0 cout>)) "Fibonacci.cpp":12:13 135 {*movdi_64bit}
     (nil))
(call_insn 27 26 28 2 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEi") [flags 0x41]  <function_decl 0x7db1bbe2f600 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":12:13 254 {call_value_internal}
     (expr_list:REG_DEAD (reg:DI 11 a1)
        (nil))
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:SI (use (reg:DI 11 a1))
            (nil))))
(insn 28 27 29 2 (set (reg/f:DI 73 [ _2 ])
        (reg:DI 10 a0)) "Fibonacci.cpp":12:13 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 10 a0)
        (nil)))
(insn 29 28 30 2 (set (reg:DI 11 a1)
        (symbol_ref:DI ("_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_") [flags 0x41]  <function_decl 0x7db1bbe41700 endl>)) "Fibonacci.cpp":12:18 135 {*movdi_64bit}
     (nil))
(insn 30 29 31 2 (set (reg:DI 10 a0)
        (reg/f:DI 73 [ _2 ])) "Fibonacci.cpp":12:18 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg/f:DI 73 [ _2 ])
        (nil)))
(call_insn 31 30 85 2 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEPFRSoS_E") [flags 0x41]  <function_decl 0x7db1bbdfd900 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":12:18 254 {call_value_internal}
     (expr_list:REG_DEAD (reg:DI 11 a1)
        (expr_list:REG_UNUSED (reg:DI 10 a0)
            (nil)))
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:DI (use (reg:DI 11 a1))
            (nil))))
(jump_insn 85 31 86 2 (set (pc)
        (label_ref 57)) "Fibonacci.cpp":13:5 240 {jump}
     (nil)
 -> 57)
(barrier 86 85 60)
(code_label 60 86 34 3 3 (nil) [1 uses])
(note 34 60 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 3 (set (reg:DI 84)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -20 [0xffffffffffffffec])) [6 b+0 S4 A32]))) "Fibonacci.cpp":14:11 90 {extendsidi2}
     (nil))
(insn 36 35 37 3 (set (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                (const_int -12 [0xfffffffffffffff4])) [6 t+0 S4 A32])
        (subreg:SI (reg:DI 84) 0)) "Fibonacci.cpp":14:11 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 84)
        (nil)))
(insn 37 36 38 3 (set (reg:DI 87)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -20 [0xffffffffffffffec])) [6 b+0 S4 A32]))) "Fibonacci.cpp":15:11 90 {extendsidi2}
     (nil))
(insn 38 37 39 3 (set (reg:SI 86)
        (subreg:SI (reg:DI 87) 0)) "Fibonacci.cpp":15:11 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 87)
        (nil)))
(insn 39 38 40 3 (set (reg:DI 89)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -24 [0xffffffffffffffe8])) [6 a+0 S4 A64]))) "Fibonacci.cpp":15:11 90 {extendsidi2}
     (nil))
(insn 40 39 41 3 (set (reg:SI 88)
        (subreg:SI (reg:DI 89) 0)) "Fibonacci.cpp":15:11 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 89)
        (nil)))
(insn 41 40 42 3 (set (reg:SI 85)
        (plus:SI (reg:SI 86)
            (reg:SI 88))) "Fibonacci.cpp":15:11 3 {addsi3}
     (expr_list:REG_DEAD (reg:SI 88)
        (expr_list:REG_DEAD (reg:SI 86)
            (nil))))
(insn 42 41 43 3 (set (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                (const_int -20 [0xffffffffffffffec])) [6 b+0 S4 A32])
        (reg:SI 85)) "Fibonacci.cpp":15:11 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85)
        (nil)))
(insn 43 42 44 3 (set (reg:DI 90)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -20 [0xffffffffffffffec])) [6 b+0 S4 A32]))) "Fibonacci.cpp":16:17 90 {extendsidi2}
     (nil))
(insn 44 43 45 3 (set (reg:DI 11 a1)
        (reg:DI 90)) "Fibonacci.cpp":16:17 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 90)
        (nil)))
(insn 45 44 46 3 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZSt4cout") [flags 0x40]  <var_decl 0x7db1bbf71cf0 cout>)) "Fibonacci.cpp":16:17 135 {*movdi_64bit}
     (nil))
(call_insn 46 45 47 3 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEi") [flags 0x41]  <function_decl 0x7db1bbe2f600 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":16:17 254 {call_value_internal}
     (expr_list:REG_DEAD (reg:DI 11 a1)
        (nil))
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:SI (use (reg:DI 11 a1))
            (nil))))
(insn 47 46 48 3 (set (reg/f:DI 74 [ _3 ])
        (reg:DI 10 a0)) "Fibonacci.cpp":16:17 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 10 a0)
        (nil)))
(insn 48 47 49 3 (set (reg:DI 11 a1)
        (symbol_ref:DI ("_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_") [flags 0x41]  <function_decl 0x7db1bbe41700 endl>)) "Fibonacci.cpp":16:22 135 {*movdi_64bit}
     (nil))
(insn 49 48 50 3 (set (reg:DI 10 a0)
        (reg/f:DI 74 [ _3 ])) "Fibonacci.cpp":16:22 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg/f:DI 74 [ _3 ])
        (nil)))
(call_insn 50 49 51 3 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("_ZNSolsEPFRSoS_E") [flags 0x41]  <function_decl 0x7db1bbdfd900 operator<<>) [0 operator<< S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":16:22 254 {call_value_internal}
     (expr_list:REG_DEAD (reg:DI 11 a1)
        (expr_list:REG_UNUSED (reg:DI 10 a0)
            (nil)))
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:DI (use (reg:DI 11 a1))
            (nil))))
(insn 51 50 52 3 (set (reg:DI 91)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -12 [0xfffffffffffffff4])) [6 t+0 S4 A32]))) "Fibonacci.cpp":17:11 90 {extendsidi2}
     (nil))
(insn 52 51 53 3 (set (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                (const_int -24 [0xffffffffffffffe8])) [6 a+0 S4 A64])
        (subreg:SI (reg:DI 91) 0)) "Fibonacci.cpp":17:11 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 91)
        (nil)))
(insn 53 52 54 3 (set (reg:DI 94)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -16 [0xfffffffffffffff0])) [6 i+0 S4 A128]))) "Fibonacci.cpp":18:11 90 {extendsidi2}
     (nil))
(insn 54 53 55 3 (set (reg:SI 93)
        (subreg:SI (reg:DI 94) 0)) "Fibonacci.cpp":18:11 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (nil)))
(insn 55 54 56 3 (set (reg:SI 92)
        (plus:SI (reg:SI 93)
            (const_int 1 [0x1]))) "Fibonacci.cpp":18:11 3 {addsi3}
     (expr_list:REG_DEAD (reg:SI 93)
        (nil)))
(insn 56 55 57 3 (set (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                (const_int -16 [0xfffffffffffffff0])) [6 i+0 S4 A128])
        (reg:SI 92)) "Fibonacci.cpp":18:11 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92)
        (nil)))
(code_label 57 56 58 4 2 (nil) [1 uses])
(note 58 57 59 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 61 4 (set (reg:DI 75 [ n.0_4 ])
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -28 [0xffffffffffffffe4])) [6 n+0 S4 A32]))) "Fibonacci.cpp":13:14 90 {extendsidi2}
     (nil))
(insn 61 59 62 4 (set (reg:DI 96)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -16 [0xfffffffffffffff0])) [6 i+0 S4 A128]))) "Fibonacci.cpp":13:14 90 {extendsidi2}
     (nil))
(insn 62 61 63 4 (set (reg:SI 95)
        (subreg:SI (reg:DI 96) 0)) "Fibonacci.cpp":13:14 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(insn 63 62 64 4 (set (reg:DI 97)
        (sign_extend:DI (reg:SI 95))) "Fibonacci.cpp":13:14 90 {extendsidi2}
     (expr_list:REG_DEAD (reg:SI 95)
        (nil)))
(insn 64 63 65 4 (set (reg:DI 98)
        (reg:DI 75 [ n.0_4 ])) "Fibonacci.cpp":13:14 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 75 [ n.0_4 ])
        (nil)))
(jump_insn 65 64 66 4 (set (pc)
        (if_then_else (lt (reg:DI 97)
                (reg:DI 98))
            (label_ref 60)
            (pc))) "Fibonacci.cpp":13:14 182 {*branchdi}
     (expr_list:REG_DEAD (reg:DI 98)
        (expr_list:REG_DEAD (reg:DI 97)
            (nil)))
 -> 60)
(note 66 65 67 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 70 5 (set (reg:DI 76 [ _22 ])
        (const_int 0 [0])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 70 67 74 5 (set (reg:DI 77 [ <retval> ])
        (reg:DI 76 [ _22 ])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 76 [ _22 ])
        (nil)))
(insn 74 70 75 5 (set (reg/f:DI 100)
        (symbol_ref:DI ("__stack_chk_guard") [flags 0x40]  <var_decl 0x7db1bbb13d80 __stack_chk_guard>)) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 75 74 76 5 (parallel [
            (set (reg:DI 101)
                (unspec:DI [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 65 frame)
                                (const_int -8 [0xfffffffffffffff8])) [5 D.48643+0 S8 A64])
                        (mem/v/f/c:DI (reg/f:DI 100) [5 __stack_chk_guard+0 S8 A64])
                    ] UNSPEC_COPYSIGN))
            (clobber (reg:DI 103))
        ]) "Fibonacci.cpp":20:1 270 {stack_protect_test_di}
     (expr_list:REG_DEAD (reg/f:DI 100)
        (expr_list:REG_UNUSED (reg:DI 103)
            (nil))))
(jump_insn 76 75 83 5 (set (pc)
        (if_then_else (eq (reg:DI 101)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "Fibonacci.cpp":20:1 182 {*branchdi}
     (expr_list:REG_DEAD (reg:DI 101)
        (nil))
 -> 79)
(note 83 76 77 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 77 83 78 6 (parallel [
            (call (mem:SI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7db1bbb59700 __stack_chk_fail>) [0 __stack_chk_fail S4 A32])
                (const_int 0 [0]))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":20:1 253 {call_internal}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
(barrier 78 77 79)
(code_label 79 78 84 7 5 (nil) [1 uses])
(note 84 79 80 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 80 84 81 7 (set (reg/i:DI 10 a0)
        (reg:DI 77 [ <retval> ])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 77 [ <retval> ])
        (nil)))
(insn 81 80 0 7 (use (reg/i:DI 10 a0)) "Fibonacci.cpp":20:1 -1
     (nil))

;; Function __static_initialization_and_destruction_0 (_Z41__static_initialization_and_destruction_0ii, funcdef_no=2227, decl_uid=48619, cgraph_uid=961, symbol_order=1018)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 7 n_edges 8 count 7 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 6 5
;; 2 succs { 3 6 }
;; 3 succs { 4 6 }
;; 4 succs { 6 }
;; 6 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r84: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a2 (r84,l0) best GR_REGS, allocno GR_REGS
    r83: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a0 (r83,l0) best GR_REGS, allocno GR_REGS
    r82: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a1 (r82,l0) best GR_REGS, allocno GR_REGS
    r81: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a4 (r81,l0) best GR_REGS, allocno GR_REGS
    r80: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a3 (r80,l0) best GR_REGS, allocno GR_REGS
    r79: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a5 (r79,l0) best GR_REGS, allocno GR_REGS
    r78: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a6 (r78,l0) best GR_REGS, allocno GR_REGS
    r77: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a8 (r77,l0) best GR_REGS, allocno GR_REGS
    r76: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a7 (r76,l0) best GR_REGS, allocno GR_REGS
    r75: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a9 (r75,l0) best GR_REGS, allocno GR_REGS
    r74: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a10 (r74,l0) best GR_REGS, allocno GR_REGS
    r73: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a11 (r73,l0) best GR_REGS, allocno GR_REGS
    r72: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a12 (r72,l0) best GR_REGS, allocno GR_REGS

  a0(r83,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a1(r82,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a2(r84,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a3(r80,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:2000
  a4(r81,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a5(r79,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a6(r78,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000
  a7(r76,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:2000
  a8(r77,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a9(r75,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a10(r74,l0) costs: SIBCALL_REGS:2000 JALR_REGS:2000 GR_REGS:2000 MEM:6000
  a11(r73,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:6000
  a12(r72,l0) costs: SIBCALL_REGS:2000 JALR_REGS:2000 GR_REGS:2000 MEM:6000

   Insn 35(l0): point = 1
   Insn 29(l0): point = 4
   Insn 28(l0): point = 6
   Insn 27(l0): point = 8
   Insn 26(l0): point = 10
   Insn 25(l0): point = 12
   Insn 24(l0): point = 14
   Insn 22(l0): point = 17
   Insn 21(l0): point = 19
   Insn 20(l0): point = 21
   Insn 19(l0): point = 23
   Insn 18(l0): point = 25
   Insn 17(l0): point = 27
   Insn 15(l0): point = 30
   Insn 14(l0): point = 32
   Insn 13(l0): point = 34
   Insn 12(l0): point = 36
   Insn 11(l0): point = 38
   Insn 7(l0): point = 40
   Insn 6(l0): point = 42
   Insn 4(l0): point = 44
   Insn 3(l0): point = 46
   Insn 5(l0): point = 48
   Insn 2(l0): point = 50
 a0(r83): [18..19]
 a1(r82): [18..23]
 a2(r84): [20..21]
 a3(r80): [24..25]
 a4(r81): [26..27]
 a5(r79): [31..32]
 a6(r78): [31..34]
 a7(r76): [35..36]
 a8(r77): [37..38]
 a9(r75): [41..42]
 a10(r74): [43..48]
 a11(r73): [45..46]
 a12(r72): [47..50]
Compressing live ranges: from 53 to 20 - 37%
Ranges after the compression:
 a0(r83): [0..1]
 a1(r82): [0..3]
 a2(r84): [2..3]
 a3(r80): [4..5]
 a4(r81): [6..7]
 a5(r79): [8..9]
 a6(r78): [8..9]
 a7(r76): [10..11]
 a8(r77): [12..13]
 a9(r75): [14..15]
 a10(r74): [16..19]
 a11(r73): [16..17]
 a12(r72): [18..19]
  regions=1, blocks=7, points=20
    allocnos=13 (big 0), copies=0, conflicts=0, ranges=13
Disposition:
   12:r72  l0    15   11:r73  l0    15   10:r74  l0    14    9:r75  l0    15
    7:r76  l0    15    8:r77  l0    15    6:r78  l0    14    5:r79  l0    15
    3:r80  l0    15    4:r81  l0    15    1:r82  l0    14    0:r83  l0    15
    2:r84  l0    15
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


__static_initialization_and_destruction_0

Dataflow summary:
;;  fully invalidated by EH 	 0 [zero] 3 [gp] 4 [tp] 5 [t0] 6 [t1] 7 [t2] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 28 [t3] 29 [t4] 30 [t5] 31 [t6] 32 [ft0] 33 [ft1] 34 [ft2] 35 [ft3] 36 [ft4] 37 [ft5] 38 [ft6] 39 [ft7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 60 [ft8] 61 [ft9] 62 [ft10] 63 [ft11]
;;  hardware regs used 	 2 [sp] 64 [arg] 65 [frame]
;;  regular block artificial uses 	 2 [sp] 8 [s0] 64 [arg] 65 [frame]
;;  eh block artificial uses 	 2 [sp] 8 [s0] 64 [arg] 65 [frame]
;;  entry block defs 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 64 [arg] 65 [frame]
;;  exit block uses 	 1 [ra] 2 [sp] 8 [s0] 65 [frame]
;;  regs ever live 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1] 12 [a2]
;;  ref usage 	r0={2d} r1={3d,1u} r2={1d,8u} r3={2d} r4={2d} r5={2d} r6={2d} r7={2d} r8={1d,6u} r10={5d,3u} r11={4d,2u} r12={4d,1u} r13={3d} r14={3d} r15={3d} r16={3d} r17={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r60={2d} r61={2d} r62={2d} r63={2d} r64={1d,5u} r65={1d,10u} r72={1d,1u} r73={1d,1u} r74={1d,1u} r75={1d,1u} r76={1d,1u} r77={1d,1u} r78={1d,1u} r79={1d,1u} r80={1d,1u} r81={1d,1u} r82={1d,1u} r83={1d,1u} r84={1d,1u} 
;;    total ref usage 165{116d,49u,0e} in 24{22 regular + 2 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 5 2 (set (reg:DI 72)
        (reg:DI 10 a0 [ __initialize_p ])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 10 a0 [ __initialize_p ])
        (nil)))
(insn 5 2 3 2 (set (reg:DI 74)
        (reg:DI 11 a1 [ __priority ])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (expr_list:REG_DEAD (reg:DI 11 a1 [ __priority ])
        (nil)))
(insn 3 5 4 2 (set (reg:SI 73)
        (subreg:SI (reg:DI 72) 0)) "Fibonacci.cpp":20:1 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 72)
        (nil)))
(insn 4 3 6 2 (set (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                (const_int -4 [0xfffffffffffffffc])) [6 __initialize_p+0 S4 A32])
        (reg:SI 73)) "Fibonacci.cpp":20:1 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 73)
        (nil)))
(insn 6 4 7 2 (set (reg:SI 75)
        (subreg:SI (reg:DI 74) 0)) "Fibonacci.cpp":20:1 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 74)
        (nil)))
(insn 7 6 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 __priority+0 S4 A32])
        (reg:SI 75)) "Fibonacci.cpp":20:1 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 75)
        (nil)))
(note 8 7 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 8 12 2 (set (reg:DI 77)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -4 [0xfffffffffffffffc])) [6 __initialize_p+0 S4 A32]))) "Fibonacci.cpp":20:1 90 {extendsidi2}
     (nil))
(insn 12 11 13 2 (set (reg:SI 76)
        (subreg:SI (reg:DI 77) 0)) "Fibonacci.cpp":20:1 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 77)
        (nil)))
(insn 13 12 14 2 (set (reg:DI 78)
        (sign_extend:DI (reg:SI 76))) "Fibonacci.cpp":20:1 90 {extendsidi2}
     (expr_list:REG_DEAD (reg:SI 76)
        (nil)))
(insn 14 13 15 2 (set (reg:DI 79)
        (const_int 1 [0x1])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:DI 78)
                (reg:DI 79))
            (label_ref:DI 36)
            (pc))) "Fibonacci.cpp":20:1 182 {*branchdi}
     (expr_list:REG_DEAD (reg:DI 79)
        (expr_list:REG_DEAD (reg:DI 78)
            (nil)))
 -> 36)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:DI 81)
        (sign_extend:DI (mem/c:SI (plus:DI (reg/f:DI 65 frame)
                    (const_int -8 [0xfffffffffffffff8])) [6 __priority+0 S4 A32]))) "Fibonacci.cpp":20:1 90 {extendsidi2}
     (nil))
(insn 18 17 19 3 (set (reg:SI 80)
        (subreg:SI (reg:DI 81) 0)) "Fibonacci.cpp":20:1 136 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 81)
        (nil)))
(insn 19 18 20 3 (set (reg:DI 82)
        (sign_extend:DI (reg:SI 80))) "Fibonacci.cpp":20:1 90 {extendsidi2}
     (expr_list:REG_DEAD (reg:SI 80)
        (nil)))
(insn 20 19 21 3 (set (reg:DI 84)
        (const_int 65536 [0x10000])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 21 20 22 3 (set (reg:DI 83)
        (plus:DI (reg:DI 84)
            (const_int -1 [0xffffffffffffffff]))) "Fibonacci.cpp":20:1 4 {adddi3}
     (expr_list:REG_DEAD (reg:DI 84)
        (expr_list:REG_EQUAL (const_int 65535 [0xffff])
            (nil))))
(jump_insn 22 21 23 3 (set (pc)
        (if_then_else (ne (reg:DI 82)
                (reg:DI 83))
            (label_ref:DI 36)
            (pc))) "Fibonacci.cpp":20:1 182 {*branchdi}
     (expr_list:REG_DEAD (reg:DI 83)
        (expr_list:REG_DEAD (reg:DI 82)
            (nil)))
 -> 36)
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7db1bbfb4510 __ioinit>)) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 135 {*movdi_64bit}
     (nil))
(call_insn 25 24 26 4 (parallel [
            (call (mem:SI (symbol_ref:DI ("_ZNSt8ios_base4InitC1Ev") [flags 0x41]  <function_decl 0x7db1bc2bca00 __ct_comp >) [0 __ct_comp  S4 A32])
                (const_int 0 [0]))
            (clobber (reg:SI 1 ra))
        ]) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 253 {call_internal}
     (expr_list:REG_DEAD (reg:DI 10 a0)
        (nil))
    (expr_list:DI (use (reg:DI 10 a0))
        (nil)))
(insn 26 25 27 4 (set (reg:DI 12 a2)
        (symbol_ref:DI ("__dso_handle") [flags 0x42]  <var_decl 0x7db1bbb13240 __dso_handle>)) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 135 {*movdi_64bit}
     (nil))
(insn 27 26 28 4 (set (reg:DI 11 a1)
        (symbol_ref:DI ("_ZStL8__ioinit") [flags 0x2]  <var_decl 0x7db1bbfb4510 __ioinit>)) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 135 {*movdi_64bit}
     (nil))
(insn 28 27 29 4 (set (reg:DI 10 a0)
        (symbol_ref:DI ("_ZNSt8ios_base4InitD1Ev") [flags 0x41]  <function_decl 0x7db1bc2bcc00 __dt_comp >)) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 135 {*movdi_64bit}
     (nil))
(call_insn 29 28 36 4 (parallel [
            (set (reg:DI 10 a0)
                (call (mem:SI (symbol_ref:DI ("__cxa_atexit") [flags 0x41]  <function_decl 0x7db1bbb32100 __cxa_atexit>) [0 __cxa_atexit S4 A32])
                    (const_int 0 [0])))
            (clobber (reg:SI 1 ra))
        ]) "/usr/riscv64-linux-gnu/include/c++/11/iostream":74:25 254 {call_value_internal}
     (expr_list:REG_DEAD (reg:DI 12 a2)
        (expr_list:REG_DEAD (reg:DI 11 a1)
            (expr_list:REG_UNUSED (reg:DI 10 a0)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 10 a0))
        (expr_list:DI (use (reg:DI 11 a1))
            (expr_list:DI (use (reg:DI 12 a2))
                (nil)))))
(code_label 36 29 34 6 8 (nil) [2 uses])
(note 34 36 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 32 6 (const_int 0 [0]) "Fibonacci.cpp":20:1 255 {nop}
     (nil))
(code_label 32 35 33 5 6 (nil) [0 uses])
(note 33 32 0 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

;; Function _GLOBAL__sub_I_main (_GLOBAL__sub_I_main, funcdef_no=2228, decl_uid=48625, cgraph_uid=962, symbol_order=1137)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r72: preferred GR_REGS, alternative NO_REGS, allocno GR_REGS
    a0 (r72,l0) best GR_REGS, allocno GR_REGS

  a0(r72,l0) costs: SIBCALL_REGS:0 JALR_REGS:0 GR_REGS:0 MEM:10000

   Insn 8(l0): point = 0
   Insn 7(l0): point = 2
   Insn 6(l0): point = 4
   Insn 5(l0): point = 6
 a0(r72): [5..6]
Compressing live ranges: from 9 to 2 - 22%
Ranges after the compression:
 a0(r72): [0..1]
  regions=1, blocks=3, points=2
    allocnos=1 (big 0), copies=0, conflicts=0, ranges=1
Disposition:
    0:r72  l0    15
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


_GLOBAL__sub_I_main

Dataflow summary:
;;  fully invalidated by EH 	 0 [zero] 3 [gp] 4 [tp] 5 [t0] 6 [t1] 7 [t2] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 28 [t3] 29 [t4] 30 [t5] 31 [t6] 32 [ft0] 33 [ft1] 34 [ft2] 35 [ft3] 36 [ft4] 37 [ft5] 38 [ft6] 39 [ft7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 60 [ft8] 61 [ft9] 62 [ft10] 63 [ft11]
;;  hardware regs used 	 2 [sp] 64 [arg] 65 [frame]
;;  regular block artificial uses 	 2 [sp] 8 [s0] 64 [arg] 65 [frame]
;;  eh block artificial uses 	 2 [sp] 8 [s0] 64 [arg] 65 [frame]
;;  entry block defs 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1] 12 [a2] 13 [a3] 14 [a4] 15 [a5] 16 [a6] 17 [a7] 42 [fa0] 43 [fa1] 44 [fa2] 45 [fa3] 46 [fa4] 47 [fa5] 48 [fa6] 49 [fa7] 64 [arg] 65 [frame]
;;  exit block uses 	 1 [ra] 2 [sp] 8 [s0] 65 [frame]
;;  regs ever live 	 1 [ra] 2 [sp] 8 [s0] 10 [a0] 11 [a1]
;;  ref usage 	r0={1d} r1={2d,1u} r2={1d,3u} r3={1d} r4={1d} r5={1d} r6={1d} r7={1d} r8={1d,2u} r10={3d,1u} r11={3d,1u} r12={2d} r13={2d} r14={2d} r15={2d} r16={2d} r17={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d,1u} r65={1d,2u} r72={1d,1u} 
;;    total ref usage 75{63d,12u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 72)
        (const_int 65536 [0x10000])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(insn 6 5 7 2 (set (reg:DI 11 a1)
        (plus:DI (reg:DI 72)
            (const_int -1 [0xffffffffffffffff]))) "Fibonacci.cpp":20:1 4 {adddi3}
     (expr_list:REG_DEAD (reg:DI 72)
        (expr_list:REG_EQUAL (const_int 65535 [0xffff])
            (nil))))
(insn 7 6 8 2 (set (reg:DI 10 a0)
        (const_int 1 [0x1])) "Fibonacci.cpp":20:1 135 {*movdi_64bit}
     (nil))
(call_insn 8 7 0 2 (parallel [
            (call (mem:SI (symbol_ref:DI ("_Z41__static_initialization_and_destruction_0ii") [flags 0x3]  <function_decl 0x7db1bbb32000 __static_initialization_and_destruction_0>) [0 __static_initialization_and_destruction_0 S4 A32])
                (const_int 0 [0]))
            (clobber (reg:SI 1 ra))
        ]) "Fibonacci.cpp":20:1 253 {call_internal}
     (expr_list:REG_DEAD (reg:DI 11 a1)
        (expr_list:REG_DEAD (reg:DI 10 a0)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:SI (use (reg:DI 10 a0))
        (expr_list:SI (use (reg:DI 11 a1))
            (nil))))
